{
  "version": 3,
  "sources": ["../../../node_modules/ts-invariant/node_modules/tslib/tslib.js", "../../../packages/fast/decorators.ts", "../../../packages/core/lib/is-valid-gql.ts", "../../../packages/core/events.ts", "../../../packages/core/apollo-controller.ts", "../../../node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js", "../../../packages/core/decorators.ts", "../../../packages/mixins/controller-host-mixin.ts", "../../../packages/mixins/apollo-element-mixin.ts", "../../../node_modules/@microsoft/fast-element/dist/esm/platform.js", "../../../node_modules/@microsoft/fast-element/dist/esm/dom.js", "../../../node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js", "../../../node_modules/@microsoft/fast-element/dist/esm/observation/observable.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/binding.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/view.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/template.js", "../../../node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js", "../../../node_modules/@microsoft/fast-element/dist/esm/components/attributes.js", "../../../node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js", "../../../node_modules/@microsoft/fast-element/dist/esm/components/controller.js", "../../../node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js", "../../../node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js", "../../../node_modules/@microsoft/fast-element/dist/esm/styles/css.js", "../../../node_modules/@microsoft/fast-element/dist/esm/observation/array-change-records.js", "../../../node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/ref.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/when.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js", "../../../node_modules/@microsoft/fast-element/dist/esm/templating/children.js", "../../../packages/fast/apollo-element.ts", "../../../node_modules/ts-invariant/node_modules/tslib/modules/index.js", "../../../node_modules/ts-invariant/src/invariant.ts", "../../../node_modules/@apollo/src/core/networkStatus.ts", "../../../node_modules/@apollo/src/core/index.ts", "../../../packages/core/lib/bound.ts", "../../../packages/core/apollo-query-controller.ts", "../../../packages/mixins/apollo-query-mixin.ts", "../../../packages/fast/apollo-query.ts", "../../../packages/core/lib/helpers.ts", "../../../packages/core/apollo-mutation-controller.ts", "../../../packages/mixins/apollo-mutation-mixin.ts", "../../../packages/fast/apollo-mutation.ts", "../../../packages/core/apollo-subscription-controller.ts", "../../../packages/mixins/apollo-subscription-mixin.ts", "../../../packages/fast/apollo-subscription.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from) {\r\n        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n            to[j] = from[i];\r\n        return to;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "export function hosted(opts?: { path?: string }) {\n  return function(target: unknown, key: string): void {\n    Object.defineProperty(target, `${key}Changed`, {\n      value() {\n        if (!this.controller) return; /* c8 ignore next */ // covered\n        if (opts?.path)\n          this.controller[opts.path][key] = this[key]; /* c8 ignore next */ // covered\n        else\n          this.controller[key] = this[key];\n      },\n    });\n  };\n}\n", "import type { DocumentNode } from '@apollo/client/core';\n\n/**\n * Validates a graphql document node.\n *\n * ```haskell\n * isValidGql :: DocumentNode a => a -> Bool\n * ```\n * @param doc Maybe a DocumentNode\n * @return Whether the argument is a DocumentNode\n */\nexport function isValidGql(doc: unknown): doc is DocumentNode {\n  return !!(\n    doc &&\n    typeof doc === 'object' &&\n    'kind' in doc &&\n    'definitions' in doc\n  );\n}\n", "import type { ApolloController } from './apollo-controller.js';\nimport type { Data } from '@apollo-elements/core/types';\nimport type {\n  ApolloClient,\n  ApolloError,\n  ApolloQueryResult,\n  FetchResult,\n  NormalizedCacheObject,\n} from '@apollo/client/core';\n\ntype ApolloEventType = `apollo-${'controller'|'element'}-${'connected'|'disconnected'}`;\ntype ApolloElementEventType = `apollo-element-${'disconnected'|'connected'}`;\ntype ApolloControllerEventType = `apollo-controller-${'disconnected'|'connected'}`;\n\ninterface ApolloControllerHost extends HTMLElement {\n  controller: ApolloController;\n}\n\nexport type ApolloQueryResultEvent<TData = unknown> =\n  CustomEvent<ApolloQueryResult<TData>>;\n\nexport type ApolloMutationResultEvent<TData = unknown> =\n  CustomEvent<FetchResult<TData>>;\n\nexport type ApolloSubscriptionResultEvent<D = unknown> = CustomEvent<{\n  client: ApolloClient<NormalizedCacheObject>;\n  subscriptionData: {\n    data: Data<D> | null;\n    loading: boolean;\n    error: null;\n  };\n}>;\n\nexport abstract class ApolloEvent<T = ApolloControllerHost> extends CustomEvent<T> {\n  public abstract type: ApolloEventType\n  public declare controller?: ApolloController;\n  constructor(type: ApolloEventType, options?: CustomEventInit) {\n    super(type, { ...options, bubbles: true, composed: true });\n  }\n}\n\n/**\n * @summary Fired when an ApolloElement connects to or disconnects from the DOM\n */\nexport class ApolloElementEvent<T = ApolloControllerHost> extends ApolloEvent<T> {\n  public declare static type: ApolloElementEventType;\n  public declare type: ApolloElementEventType;\n  constructor(type: ApolloElementEventType, detail: T) {\n    super(type, { detail });\n  }\n}\n\nexport abstract class ApolloControllerEvent extends ApolloEvent {\n  public abstract controller: ApolloController;\n  public abstract type: ApolloControllerEventType\n  constructor(type: ApolloControllerEventType) {\n    super(type);\n  }\n}\n\n/**\n * @summary Fired when a controlled element connects to the DOM\n */\nexport class ApolloControllerConnectedEvent extends ApolloControllerEvent {\n  public static type = 'apollo-controller-connected' as const;\n  public declare type: 'apollo-controller-connected';\n  constructor(public controller: ApolloController) {\n    super(ApolloControllerConnectedEvent.type);\n  }\n}\n\n/**\n * @summary Fired when a controlled element disconnects from the DOM\n */\nexport class ApolloControllerDisconnectedEvent extends ApolloControllerEvent {\n  public static type = 'apollo-controller-disconnected' as const;\n  public declare type: 'apollo-controller-disconnected';\n  constructor(public controller: ApolloController) {\n    super(ApolloControllerDisconnectedEvent.type);\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'apollo-controller-connected': ApolloControllerConnectedEvent;\n    'apollo-controller-disconnected': ApolloControllerDisconnectedEvent;\n    'apollo-element-connected': ApolloElementEvent;\n    'apollo-element-disconnected': ApolloElementEvent;\n    'apollo-error': CustomEvent<ApolloError>;\n    'apollo-mutation-result': ApolloMutationResultEvent;\n    'apollo-query-result': ApolloQueryResultEvent;\n    'apollo-subscription-result': ApolloSubscriptionResultEvent;\n  }\n\n  interface WindowEventMap {\n    'apollo-element-disconnected': ApolloElementEvent;\n    'apollo-controller-disconnected': ApolloControllerDisconnectedEvent;\n  }\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nimport type {\n  ApolloClient,\n  ApolloError,\n  ErrorPolicy,\n  NormalizedCacheObject,\n} from '@apollo/client/core';\n\n\nimport type {\n  ComponentDocument,\n  Data,\n  GraphQLError,\n  MaybeTDN,\n  MaybeVariables,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport { isValidGql } from './lib/is-valid-gql.js';\n\nimport { ApolloControllerConnectedEvent, ApolloControllerDisconnectedEvent } from './events.js';\n\nexport interface ApolloControllerOptions<D, V> {\n  /** The `ApolloClient` instance for the controller. */\n  client?: ApolloClient<NormalizedCacheObject>;\n  /** Variables for the operation. */\n  variables?: Variables<D, V>;\n  /** Context passed to the link execution chain. */\n  context?: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  /**\n   * errorPolicy determines the level of events for errors in the execution result. The options are:\n   * - `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n   * - `ignore`: errors from the request do not stop the observable, but also don't call `next`\n   * - `all`: errors are treated like data and will notify observables\n   * @summary [Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the query.\n   */\n  errorPolicy?: ErrorPolicy;\n  /** When provided, the controller will fall back to this element to fire events */\n  hostElement?: HTMLElement;\n  /** Host update callback */\n  [update]?(properties?: Record<string, unknown>): void;\n}\n\nexport const update = Symbol('update');\n\ninterface ReflectingReactiveControllerHost extends ReactiveControllerHost {\n  [update](properties?: Record<string, unknown>): void;\n}\n\nfunction isReflectingHost(host: ReactiveControllerHost): host is ReflectingReactiveControllerHost {\n  return typeof (host as ReactiveControllerHost & { [update]: unknown })[update] === 'function';\n}\n\nexport abstract class ApolloController<\n  D extends MaybeTDN = MaybeTDN,\n  V = MaybeVariables<D>\n>\nimplements ReactiveController {\n  #options: ApolloControllerOptions<D, V> = {};\n\n  #client: ApolloClient<NormalizedCacheObject> | null = null;\n\n  #document: ComponentDocument<D> | null = null;\n\n  /** @summary The event emitter to use when firing events, usually the host element. */\n  protected emitter: EventTarget;\n\n  called = true;\n\n  /** @summary Latest data for the operation, or `null`. */\n  data: Data<D> | null = null;\n\n  /** @summary Latest error from the operation, or `null`. */\n  error: ApolloError | null = null;\n\n  /** @summary Latest errors from the operation, or `[]`. */\n  errors: readonly GraphQLError[] = [];\n\n  /** @summary Whether a request is in-flight. */\n  loading = false;\n\n  /** @summary Options for the operation and controller. */\n  get options(): ApolloControllerOptions<D, V> {\n    return this.#options;\n  }\n\n  set options(v: ApolloControllerOptions<D, V>) {\n    const u = this.#options[update];\n    this.#options = { [update]: u, ...v };\n  }\n\n  /** @summary The `ApolloClient` instance for this controller. */\n  get client(): ApolloClient<NormalizedCacheObject> | null {\n    return this.#client;\n  }\n\n  set client(v: ApolloClient<NormalizedCacheObject> | null) {\n    this.#client = v;\n    this.clientChanged?.(v); /* c8 ignore next */ // covered\n    this.notify('client');\n  }\n\n  /** @summary The GraphQL document for the operation. */\n  get document(): ComponentDocument<D> | null { return this.#document; }\n\n  set document(document: ComponentDocument<D> | null) {\n    if (document === this.#document)\n      return; /* c8 ignore next */ // covered\n    else if (!document)\n      this.#document = null; /* c8 ignore next */ // covered\n    else if (!isValidGql(document)) { /* c8 ignore next */ // covered\n      const name = (this.constructor.name).replace(/Apollo(\\w+)Controller/, '$1');\n      throw new TypeError(`${name} must be a parsed GraphQL document.`);\n    } else {\n      this.#document = document;\n      this[update]({ document });\n      this.documentChanged?.(document);/* c8 ignore next */\n    }\n  }\n\n  /** @summary Variables for the operation. */\n  get variables(): Variables<D, V> | null {\n    return this.options?.variables ?? null;\n  }\n\n  set variables(variables: Variables<D, V> | null) {\n    if (!variables)\n      delete this.options.variables;/* c8 ignore next */ // covered\n    else if (variables === this.options.variables)\n      return; /* c8 ignore next */ // covered\n    else\n      this.options.variables = variables;\n    this[update]({ variables });\n    this.variablesChanged?.(variables);/* c8 ignore next */\n  }\n\n  constructor(public host: ReactiveControllerHost, options?: ApolloControllerOptions<D, V>) {\n    /* c8 ignore start */ // these are all covered\n    if (host instanceof EventTarget)\n      this.emitter = host;\n    else if (options?.hostElement instanceof EventTarget)\n      this.emitter = options.hostElement;\n    else\n      this.emitter = new EventTarget();\n    this.options = options ?? {};\n    this.client = this.options.client ?? window.__APOLLO_CLIENT__ ?? null;\n    host.addController?.(this);\n    /* c8 ignore stop */\n  }\n\n  /** @summary requests an update on the host. */\n  private [update](properties?: Record<string, unknown>): void {\n    this.host.requestUpdate();\n    /* c8 ignore start */ // these are all covered\n    if (isReflectingHost(this.host))\n      this.host[update](properties);\n    else\n      this.options[update]?.(properties);\n    /* c8 ignore stop */\n  }\n\n  /** @summary callback for when the GraphQL document changes. */\n  protected documentChanged?(document?: ComponentDocument<D> | null): void;\n\n  /** @summary callback for when the GraphQL variables change. */\n  protected variablesChanged?(variables?: Variables<D, V> | null): void;\n\n  /** @summary callback for when the Apollo client changes. */\n  protected clientChanged?(client?: ApolloClient<NormalizedCacheObject> | null): void;\n\n  /** @summary Notifies about updated properties. */\n  protected notify(...keys: (keyof this)[]): void {\n    this[update](Object.fromEntries(keys.map(x => [x, this[x]])));\n  }\n\n  /** @summary Assigns the controller's variables and GraphQL document. */\n  protected init(document: ComponentDocument<D> | null): void {\n    this.variables ??= this.options.variables ?? null;\n    this.document = document;\n  }\n\n  /** @fires {ApolloControllerConnectedEvent} apollo-controller-connected when the controller's host connects to the document. */\n  hostConnected(): void {\n    this.emitter.dispatchEvent(new ApolloControllerConnectedEvent(this));\n  }\n\n  /** @fires {ApolloControllerDisconnectedEvent} apollo-controller-disconnected when the controller's host disconnects from the document. */\n  hostDisconnected(): void {\n    this.emitter.dispatchEvent(new ApolloControllerDisconnectedEvent(this));\n    window.dispatchEvent(new ApolloControllerDisconnectedEvent(this));\n  }\n}\n", "const appliedClassMixins = new WeakMap();\n\n/** Vefify if the Mixin was previously applyed\n * @private\n * @param {function} mixin      Mixin being applyed\n * @param {object} superClass   Class receiving the new mixin\n * @returns {boolean}\n */\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\n  let klass = superClass;\n  while (klass) {\n    if (appliedClassMixins.get(klass) === mixin) {\n      return true;\n    }\n    klass = Object.getPrototypeOf(klass);\n  }\n  return false;\n}\n\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\n * @export\n * @param {function} mixin      Mixin to be applyed\n * @returns {object}            Mixed class with mixin applied\n */\nexport function dedupeMixin(mixin) {\n  return superClass => {\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\n      return superClass;\n    }\n    const mixedClass = mixin(superClass);\n    appliedClassMixins.set(mixedClass, mixin);\n    return mixedClass;\n  };\n}\n", "import type { ReactiveElement, ReactiveControllerHost } from '@lit/reactive-element';\nimport type { ApolloController, ApolloControllerOptions } from './apollo-controller.js';\n\ntype O = ApolloControllerOptions<any, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\ntype Key = string|number|symbol;\n\n/* eslint-disable @typescript-eslint/ban-types */\ntype AnyObj = object;\n/* eslint-enable @typescript-eslint/ban-types */\n\nconst initialProps = new WeakMap<AnyObj, Map<Key, unknown>>();\n\nexport function getInitialProps<T extends AnyObj>(\n  obj: T,\n): Map<keyof T, T[keyof T]> {\n  if (!initialProps.has(obj))\n    initialProps.set(obj, new Map());\n  return initialProps.get(obj) as Map<keyof T, T[keyof T]>;\n}\n\nexport function getInitialProp<T extends AnyObj>(obj: T, key: keyof T): T[keyof T] | undefined {\n  return getInitialProps(obj).get(key);\n}\n\nexport function setInitialProps<T extends AnyObj>(obj: T): void {\n  getInitialProps(obj).forEach((val, key) => obj[key] ??= val);\n}\n\nexport function setInitialProp<T extends AnyObj>(obj: T, key: keyof T, value: T[keyof T]): void {\n  getInitialProps(obj).set(key, value);\n}\n\nexport interface DefineOptions {\n  /** When set to 'options', the controlled property is a member of controller.options */\n  path?: 'options',\n  /** When true, setting the property has no effect */\n  readonly?: boolean,\n  /** Called after setting with the new value */\n  onSet?(x: unknown): void,\n}\n\nfunction defineOnReactiveElement<T extends ReactiveElement & {\n  controller: ApolloController;\n}>(\n  proto: T,\n  name: string & keyof T,\n  opts: DefineOptions\n): void {\n  // Run our property effects\n  defineOnHTMLElement(proto, name, {\n    ...opts,\n    // In addition to any user-defined side-effects,\n    // also notify the ReactiveElement lifecycle\n    onSet(this: T, x: unknown) {\n      const old = this[name];\n      opts?.onSet?.call?.(this, x);/* c8 ignore next */\n      this.requestUpdate(name, old);\n    },\n  });\n  // And also run ReactiveElement's property effects\n  const Class = proto.constructor as typeof ReactiveElement;\n  // @ts-expect-error: i know it's protected\n  Class.createProperty(name, Class.getPropertyOptions(name));\n}\n\nfunction defineOnHTMLElement<T extends HTMLElement & ReactiveControllerHost & {\n  controller: ApolloController;\n  requestUpdate(name?: string, old?: unknown): void;\n}>(\n  proto: T,\n  name: string & keyof T,\n  opts: DefineOptions\n): void {\n  Object.defineProperty(proto, name, {\n    configurable: true,\n    get(this: T) {\n      if (opts.path) { /* c8 ignore next */\n        return (\n            !this.controller ? getInitialProp(this, name)/* c8 ignore next */\n          : this.controller[opts.path][name as keyof O]\n        );\n      } else {\n        return (\n            !this.controller ? getInitialProp(this, name)/* c8 ignore next */\n          : this.controller[name as keyof ApolloController]\n        );\n      }\n    },\n\n    set(this: T, value: T[keyof T]) {\n      if (opts.readonly) return;/* c8 ignore next */\n      const old = this[name as keyof T];\n      if (!this.controller)\n        setInitialProp(this, name, value);/* c8 ignore next */\n      else {\n        if (opts.path)\n          this.controller[opts.path][name as keyof O] = value as O[keyof O];\n        else\n          this.controller[name as keyof ApolloController] = value as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n        if (opts.onSet)\n          opts.onSet.call(this, value);/* c8 ignore next */\n      }\n      this.requestUpdate?.(name, old);\n    },\n  });\n}\n\nfunction isReactiveElement(\n  proto: HTMLElement\n): proto is ReactiveElement {\n  return typeof (proto.constructor as typeof ReactiveElement).createProperty === 'function';\n}\n\n/**\n * @summary Class field decorator for controlled properties\n *\n * Controlled properties are element class fields which defer to and reflect that property on the element's `controller` property, which is a `ReactiveController`.\n *\n * @param  options Options for the controlled field\n */\nexport function controlled(options: DefineOptions = {}) {\n  return function<T extends HTMLElement & ReactiveControllerHost & {\n  controller: ApolloController;\n}>(\n    proto: T,\n    name: string & keyof T\n  ): void {\n    if (isReactiveElement(proto))\n      defineOnReactiveElement(proto, name, options);/* c8 ignore next */\n    else\n      defineOnHTMLElement(proto, name, options);/* c8 ignore next */\n  };\n}\n", "import type { ReactiveController, ReactiveControllerHost } from '@lit/reactive-element';\nimport type { Constructor, CustomElement } from '@apollo-elements/core/types';\nimport type { ControllerHost } from '@apollo-elements/core/types';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\n\nimport { setInitialProps } from '@apollo-elements/core/decorators';\n\nconst INITIALIZED = new WeakMap();\n\nconst microtask = Promise.resolve();\n\nfunction ControllerHostMixinImpl<T extends Constructor<CustomElement>>(\n  superclass: T\n): T & Constructor<ControllerHost> {\n  class ControllerHostElement extends superclass implements ReactiveControllerHost {\n    #controllers = new Set<ReactiveController>();\n\n    #updatePending = false;\n\n    #resolve!: (v: boolean) => void;\n\n    #updateComplete = new Promise(r => {\n      this.#resolve = r;\n    });\n\n    get updateComplete(): Promise<boolean> {\n      // @ts-expect-error: superclass may or may not have it\n      return super.updateComplete ??\n        this.#updateComplete;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n      INITIALIZED.set(this, true);\n      this.requestUpdate();\n    }\n\n    private async doUpdate() {\n      this.#updatePending = true;\n      await this.#updateComplete;\n      this.update();\n      this.#updateComplete = new Promise(r => { this.#resolve = r; });\n      microtask.then(() => this.updated());\n    }\n\n    connectedCallback() {\n      // assign props that were set before initialization finished\n      setInitialProps(this);\n      super.connectedCallback?.();/* c8 ignore next */\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.addController !== 'function')\n        this.#controllers.forEach(c => c.hostConnected?.());\n      this.#resolve(true);\n    }\n\n    addController(controller: ReactiveController): void {\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.addController === 'function') super.addController(controller);/* c8 ignore next */\n      else\n        this.#controllers.add(controller);\n    }\n\n    removeController(controller: ReactiveController): void {\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.removeController === 'function') super.removeController(controller);\n      else\n        this.#controllers.delete(controller);\n    }\n\n    requestUpdate(): void {\n      if (!INITIALIZED.get(this)) return;/* c8 ignore next */\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.requestUpdate === 'function') return super.requestUpdate();/* c8 ignore next */\n      if (!this.#updatePending)\n        this.doUpdate();\n    }\n\n    update(...args: any[]) {\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.update === 'function') super.update(...args);/* c8 ignore next */\n      else\n        this.#controllers.forEach(c => c.hostUpdate?.());/* c8 ignore next */\n    }\n\n    updated(...args: any[]) {\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.updated === 'function') super.updated(...args);/* c8 ignore next */\n      else {\n        this.#updatePending = false;\n        this.#controllers.forEach(c => c.hostUpdated?.());/* c8 ignore next */\n        this.#resolve(this.#updatePending);\n      }\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback?.();/* c8 ignore next */\n      // @ts-expect-error: superclass may or may not have it\n      if (typeof super.removeController !== 'function')\n        this.#controllers.forEach(c => c.hostDisconnected?.());\n    }\n  }\n\n  return ControllerHostElement as unknown as T & Constructor<ControllerHost>;\n}\n\nexport const ControllerHostMixin =\n  dedupeMixin(ControllerHostMixinImpl);\n", "import type {\n  ApolloClient,\n  ApolloError,\n  ErrorPolicy,\n  NormalizedCacheObject,\n} from '@apollo/client/core';\n\nimport type {\n  ComponentDocument,\n  Constructor,\n  Data,\n  GraphQLError,\n  MaybeTDN,\n  MaybeVariables,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type { ApolloController, ApolloElementElement } from '@apollo-elements/core';\n\nimport { ControllerHostMixin } from './controller-host-mixin.js';\n\nimport { controlled } from '@apollo-elements/core/decorators';\nimport { ApolloElementEvent } from '@apollo-elements/core/events';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\n\ntype MixinInstance<B extends Constructor<HTMLElement>> = B & {\n  new <D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>():\n    ApolloElementElement<D, V>;\n  documentType: 'document'|'mutation'|'query'|'subscription';\n  observedAttributes?: string[];\n}\n\nfunction ApolloElementMixinImplementation<B extends Constructor & {\n  observedAttributes?: string[]\n}>(\n  superclass: B\n): MixinInstance<B> {\n  class ApolloElement<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n    extends ControllerHostMixin(superclass) {\n    static documentType: 'document'|'query'|'mutation'|'subscription' = 'document';\n\n    static get observedAttributes(): string[] {\n      return [\n        ...super.observedAttributes ?? [], /* c8 ignore next */ // covered\n        'error-policy',\n        'fetch-policy',\n      ];\n    }\n\n    /** @summary The Apollo Client instance. */\n    @controlled()\n    client: ApolloClient<NormalizedCacheObject> | null = window.__APOLLO_CLIENT__ ?? null; /* c8 ignore next */ // covered\n\n    declare controller: ApolloController<D, V>;\n\n    /**\n     * @summary Operation document.\n     * A GraphQL document containing a single query, mutation, or subscription.\n     * You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).\n     */\n    @controlled() document: ComponentDocument<D> | null = null;\n\n    /** @summary Latest data */\n    @controlled() data: Data<D> | null = null;\n\n    /**\n     * @summary Operation variables.\n     * An object that maps from the name of a variable as used in the operation's GraphQL document to that variable's value.\n     */\n    @controlled() variables: Variables<D, V> | null = null;\n\n    /** @summary Latest error. */\n    @controlled() error: Error | ApolloError | null = null;\n\n    /** @summary Latest errors. */\n    @controlled() errors: readonly GraphQLError[] = [];\n\n    /** @summary Whether a request is in-flight. */\n    @controlled() loading = false;\n\n    /** @summary Fetch Policy for the operation. */\n    @controlled({ path: 'options' }) fetchPolicy?: string;\n\n    /** @summary Context passed to the link execution chain. */\n    @controlled({ path: 'options' }) context?: Record<string, unknown>;\n\n    /**\n     * errorPolicy determines the level of events for errors in the execution result. The options are:\n     * - `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n     * - `ignore`: errors from the request do not stop the observable, but also don't call `next`\n     * - `all`: errors are treated like data and will notify observables\n     * @summary [Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.\n     * @attr error-policy\n     */\n    @controlled({ path: 'options' }) errorPolicy?: ErrorPolicy;\n\n    /** @summary True when the element is connected and ready to receive its GraphQL document */\n    public readyToReceiveDocument = false;\n\n    constructor(...a: any[]) {\n      super(...a);\n      this.requestUpdate();\n    }\n\n    attributeChangedCallback(name: string, oldVal: string, newVal: string): void {\n      type ThisPolicy = `${'error'|'fetch'}Policy`;\n      /* c8 ignore start */ // covered\n      switch (name) {\n        case 'error-policy':\n        case 'fetch-policy': {\n          const prop =\n            name.replace(/-(.)/g, (_, g1) => g1.toUpperCase()) as ThisPolicy;\n          if (this[prop] !== newVal)\n            this[prop] = newVal as this['errorPolicy'];\n        }\n      }\n      super.attributeChangedCallback?.(name, oldVal, newVal);\n      /* c8 ignore stop */\n    }\n\n    connectedCallback(): void {\n      this.readyToReceiveDocument = true;\n      super.connectedCallback();\n      this.dispatchEvent(new ApolloElementEvent('apollo-element-connected', this));\n    }\n\n    disconnectedCallback(): void {\n      this.dispatchEvent(new ApolloElementEvent('apollo-element-disconnected', this));\n      window.dispatchEvent(new ApolloElementEvent('apollo-element-disconnected', this));\n      super.disconnectedCallback?.(); /* c8 ignore start */ // manual testing showed that both cases were hit\n    }\n\n    /**\n     * Lifecycle callback that reacts to changes in the GraphQL document.\n     * @param document The GraphQL document.\n     */\n    protected documentChanged?(document: this['document']): void\n\n    /**\n     * Lifecycle callback that reacts to changes in the operation variables.\n     * @param variables The variables.\n     */\n    protected variablesChanged?(variables: this['variables']): void\n  }\n\n  return ApolloElement as unknown as MixinInstance<B>;\n}\n\n/**\n * `ApolloElementMixin`: class mixin for apollo custom elements.\n */\nexport const ApolloElementMixin =\n  dedupeMixin(ApolloElementMixinImplementation);\n", "/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = (function () {\n    if (typeof globalThis !== \"undefined\") {\n        // We're running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== \"undefined\") {\n        // We're running in NodeJS\n        return global;\n    }\n    if (typeof self !== \"undefined\") {\n        // We're running in a worker.\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        // We're running in the browser's main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function(\"return this\")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nexport const emptyArray = Object.freeze([]);\n", "import { $global } from \"./platform\";\nconst updateQueue = [];\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy(\"fast-html\", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nfunction processQueue() {\n    const capacity = 1024;\n    let index = 0;\n    while (index < updateQueue.length) {\n        const task = updateQueue[index];\n        task.call();\n        index++;\n        // Prevent leaking memory for long chains of recursive calls to `queueMicroTask`.\n        // If we call `queueMicroTask` within a MicroTask scheduled by `queueMicroTask`, the queue will\n        // grow, but to avoid an O(n) walk for every MicroTask we execute, we don't\n        // shift MicroTasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 MicroTasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (let scan = 0, newLength = updateQueue.length - index; scan < newLength; scan++) {\n                updateQueue[scan] = updateQueue[scan + index];\n            }\n            updateQueue.length -= index;\n            index = 0;\n        }\n    }\n    updateQueue.length = 0;\n}\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nexport const _interpolationStart = `${marker}{`;\n/** @internal */\nexport const _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nexport const DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        \"replace\" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error(\"The HTML policy can only be set once.\");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, \"\"));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}=\"${this.createInterpolationPlaceholder(index)}\"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `<!--${marker}:${index}-->`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate(callable) {\n        if (updateQueue.length < 1) {\n            window.requestAnimationFrame(processQueue);\n        }\n        updateQueue.push(callable);\n    },\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise((resolve) => {\n            DOM.queueUpdate(resolve);\n        });\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, \"\")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n", "function spilloverSubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index === -1) {\n        spillover.push(subscriber);\n    }\n}\nfunction spilloverUnsubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index !== -1) {\n        spillover.splice(index, 1);\n    }\n}\nfunction spilloverNotifySubscribers(args) {\n    const spillover = this.spillover;\n    const source = this.source;\n    for (let i = 0, ii = spillover.length; i < ii; ++i) {\n        spillover[i].handleChange(source, args);\n    }\n}\nfunction spilloverHas(subscriber) {\n    return this.spillover.indexOf(subscriber) !== -1;\n}\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nexport class SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.sub1 === subscriber || this.sub2 === subscriber;\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        if (this.has(subscriber)) {\n            return;\n        }\n        if (this.sub1 === void 0) {\n            this.sub1 = subscriber;\n            return;\n        }\n        if (this.sub2 === void 0) {\n            this.sub2 = subscriber;\n            return;\n        }\n        this.spillover = [this.sub1, this.sub2, subscriber];\n        this.subscribe = spilloverSubscribe;\n        this.unsubscribe = spilloverUnsubscribe;\n        this.notify = spilloverNotifySubscribers;\n        this.has = spilloverHas;\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        if (this.sub1 === subscriber) {\n            this.sub1 = void 0;\n        }\n        else if (this.sub2 === subscriber) {\n            this.sub2 = void 0;\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const sub1 = this.sub1;\n        const sub2 = this.sub2;\n        const source = this.source;\n        if (sub1 !== void 0) {\n            sub1.handleChange(source, args);\n        }\n        if (sub2 !== void 0) {\n            sub2.handleChange(source, args);\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nexport class PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        let subscribers = this.subscribers[propertyToWatch];\n        if (subscribers === void 0) {\n            this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n        }\n        subscribers.subscribe(subscriber);\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        const subscribers = this.subscribers[propertyToUnwatch];\n        if (subscribers === void 0) {\n            return;\n        }\n        subscribers.unsubscribe(subscriber);\n    }\n}\n", "import { DOM } from \"../dom\";\nimport { PropertyChangeNotifier, SubscriberSet } from \"./notifier\";\nconst volatileRegex = /(:|&&|\\|\\||if)/;\nconst notifierLookup = new WeakMap();\nconst accessorLookup = new WeakMap();\nlet watcher = void 0;\nlet createArrayObserver = (array) => {\n    throw new Error(\"Must call enableArrayObservation before observing arrays.\");\n};\nclass DefaultObservableAccessor {\n    constructor(name) {\n        this.name = name;\n        this.field = `_${name}`;\n        this.callback = `${name}Changed`;\n    }\n    getValue(source) {\n        if (watcher !== void 0) {\n            watcher.watch(source, this.name);\n        }\n        return source[this.field];\n    }\n    setValue(source, newValue) {\n        const field = this.field;\n        const oldValue = source[field];\n        if (oldValue !== newValue) {\n            source[field] = newValue;\n            const callback = source[this.callback];\n            if (typeof callback === \"function\") {\n                callback.call(source, oldValue, newValue);\n            }\n            /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n            getNotifier(source).notify(this.name);\n        }\n    }\n}\n/**\n * Common Observable APIs.\n * @public\n */\nexport const Observable = Object.freeze({\n    /**\n     * @internal\n     * @param factory - The factory used to create array observers.\n     */\n    setArrayObserverFactory(factory) {\n        createArrayObserver = factory;\n    },\n    /**\n     * Gets a notifier for an object or Array.\n     * @param source - The object or Array to get the notifier for.\n     */\n    getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    },\n    /**\n     * Records a property change for a source object.\n     * @param source - The object to record the change against.\n     * @param propertyName - The property to track as changed.\n     */\n    track(source, propertyName) {\n        if (watcher !== void 0) {\n            watcher.watch(source, propertyName);\n        }\n    },\n    /**\n     * Notifies watchers that the currently executing property getter or function is volatile\n     * with respect to its observable dependencies.\n     */\n    trackVolatile() {\n        if (watcher !== void 0) {\n            watcher.needsRefresh = true;\n        }\n    },\n    /**\n     * Notifies subscribers of a source object of changes.\n     * @param source - the object to notify of changes.\n     * @param args - The change args to pass to subscribers.\n     */\n    notify(source, args) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        getNotifier(source).notify(args);\n    },\n    /**\n     * Defines an observable property on an object or prototype.\n     * @param target - The target object to define the observable on.\n     * @param nameOrAccessor - The name of the property to define as observable;\n     * or a custom accessor that specifies the property name and accessor implementation.\n     */\n    defineProperty(target, nameOrAccessor) {\n        if (typeof nameOrAccessor === \"string\") {\n            nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n        }\n        this.getAccessors(target).push(nameOrAccessor);\n        Reflect.defineProperty(target, nameOrAccessor.name, {\n            enumerable: true,\n            get: function () {\n                return nameOrAccessor.getValue(this);\n            },\n            set: function (newValue) {\n                nameOrAccessor.setValue(this, newValue);\n            },\n        });\n    },\n    /**\n     * Finds all the observable accessors defined on the target,\n     * including its prototype chain.\n     * @param target - The target object to search for accessor on.\n     */\n    getAccessors(target) {\n        let accessors = accessorLookup.get(target);\n        if (accessors === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (accessors === void 0 && currentTarget !== null) {\n                accessors = accessorLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            if (accessors === void 0) {\n                accessors = [];\n            }\n            else {\n                accessors = accessors.slice(0);\n            }\n            accessorLookup.set(target, accessors);\n        }\n        return accessors;\n    },\n    /**\n     * Creates a {@link BindingObserver} that can watch the\n     * provided {@link Binding} for changes.\n     * @param binding - The binding to observe.\n     * @param initialSubscriber - An initial subscriber to changes in the binding value.\n     * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.\n     */\n    binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n    },\n    /**\n     * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n     * on every evaluation of the value.\n     * @param binding - The binding to inspect.\n     */\n    isVolatileBinding(binding) {\n        return volatileRegex.test(binding.toString());\n    },\n});\nconst getNotifier = Observable.getNotifier;\nconst trackVolatile = Observable.trackVolatile;\nconst queueUpdate = DOM.queueUpdate;\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nexport function observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nexport function volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nlet currentEvent = null;\n/**\n * @param event - The event to set as current for the context.\n * @internal\n */\nexport function setCurrentEvent(event) {\n    currentEvent = event;\n}\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nexport class ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return currentEvent;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, \"index\");\nObservable.defineProperty(ExecutionContext.prototype, \"length\");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nexport const defaultExecutionContext = Object.seal(new ExecutionContext());\nclass BindingObserverImplementation extends SubscriberSet {\n    constructor(binding, initialSubscriber, isVolatileBinding = false) {\n        super(binding, initialSubscriber);\n        this.binding = binding;\n        this.isVolatileBinding = isVolatileBinding;\n        this.needsRefresh = true;\n        this.needsQueue = true;\n        this.first = this;\n        this.last = null;\n        this.propertySource = void 0;\n        this.propertyName = void 0;\n        this.notifier = void 0;\n        this.next = void 0;\n    }\n    observe(source, context) {\n        if (this.needsRefresh && this.last !== null) {\n            this.disconnect();\n        }\n        const previousWatcher = watcher;\n        watcher = this.needsRefresh ? this : void 0;\n        this.needsRefresh = this.isVolatileBinding;\n        const result = this.binding(source, context);\n        watcher = previousWatcher;\n        return result;\n    }\n    disconnect() {\n        if (this.last !== null) {\n            let current = this.first;\n            while (current !== void 0) {\n                current.notifier.unsubscribe(this, current.propertyName);\n                current = current.next;\n            }\n            this.last = null;\n            this.needsRefresh = this.needsQueue = true;\n        }\n    }\n    /** @internal */\n    watch(propertySource, propertyName) {\n        const prev = this.last;\n        const notifier = getNotifier(propertySource);\n        const current = prev === null ? this.first : {};\n        current.propertySource = propertySource;\n        current.propertyName = propertyName;\n        current.notifier = notifier;\n        notifier.subscribe(this, propertyName);\n        if (prev !== null) {\n            if (!this.needsRefresh) {\n                watcher = void 0;\n                const prevValue = prev.propertySource[prev.propertyName];\n                watcher = this;\n                if (propertySource === prevValue) {\n                    this.needsRefresh = true;\n                }\n            }\n            prev.next = current;\n        }\n        this.last = current;\n    }\n    /** @internal */\n    handleChange() {\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            queueUpdate(this);\n        }\n    }\n    /** @internal */\n    call() {\n        if (this.last !== null) {\n            this.needsQueue = true;\n            this.notify(this);\n        }\n    }\n    records() {\n        let next = this.first;\n        return {\n            next: () => {\n                const current = next;\n                if (current === undefined) {\n                    return { value: void 0, done: true };\n                }\n                else {\n                    next = next.next;\n                    return {\n                        value: current,\n                        done: false,\n                    };\n                }\n            },\n            [Symbol.iterator]: function () {\n                return this;\n            },\n        };\n    }\n}\n", "import { DOM } from \"../dom\";\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nexport class HTMLDirective {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A {@link HTMLDirective} that targets a named attribute or property on a node.\n * @public\n */\nexport class TargetedHTMLDirective extends HTMLDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nexport class AttachedBehaviorHTMLDirective extends HTMLDirective {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive's index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n", "import { DOM } from \"../dom\";\nimport { Observable, setCurrentEvent, } from \"../observation/observable\";\nimport { TargetedHTMLDirective } from \"./html-directive\";\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there's no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = \"\";\n    }\n    // If the value has a \"create\" method, then it's a template-like.\n    if (value.create) {\n        this.target.textContent = \"\";\n        let view = this.target.$fastView;\n        // If there's no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn't created\n            // from the same template as the new value, then we\n            // need to remove the old view if it's still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It's possible that the value is the same as the previous template\n        // and that there's actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it's currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === \"\") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there's no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nexport class HTMLBindingDirective extends TargetedHTMLDirective {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case \":\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === \"innerHTML\") {\n                    const binding = this.binding;\n                    /* eslint-disable-next-line */\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case \"?\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case \"@\":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === \"class\") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nexport class BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        setCurrentEvent(event);\n        const result = this.binding(this.source, this.context);\n        setCurrentEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n", "import { _interpolationEnd, _interpolationStart, DOM } from \"../dom\";\nimport { HTMLBindingDirective } from \"./binding\";\nlet sharedContext = null;\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === \"string\") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = \"\";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new HTMLBindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== \"\") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new HTMLBindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(\"\"), lastNode.nextSibling);\n            if (typeof currentPart === \"string\") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = \" \";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nexport function compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (\n    // If the first node in a fragment is a marker, that means it's an unstable first node,\n    // because something like a when, repeat, etc. could add nodes before the marker.\n    // To mitigate this, we insert a stable first node. However, if we insert a node,\n    // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n    DOM.isMarker(fragment.firstChild) ||\n        // Or if there is only one node and a directive, it means the template's content\n        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by\n        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.\n        (fragment.childNodes.length === 1 && directives.length)) {\n        fragment.insertBefore(document.createComment(\"\"), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n", "// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nexport class HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view's DOM nodes to the referenced node.\n     * @param node - The parent node to append the view's DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view's DOM nodes before the referenced node.\n     * @param node - The node to insert the view's DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const parentNode = node.parentNode;\n            const end = this.lastChild;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view's DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view's behaviors to its binding source.\n     * @param source - The binding source for the view's binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view's behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n", "import { DOM } from \"../dom\";\nimport { defaultExecutionContext } from \"../observation/observable\";\nimport { compileTemplate } from \"./compiler\";\nimport { HTMLView } from \"./view\";\nimport { HTMLDirective, TargetedHTMLDirective, } from \"./html-directive\";\nimport { HTMLBindingDirective } from \"./binding\";\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\nexport class ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === \"string\") {\n                template = document.createElement(\"template\");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === \"TEMPLATE\") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === \"string\") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nexport function html(strings, ...values) {\n    const directives = [];\n    let html = \"\";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === \"function\") {\n            value = new HTMLBindingDirective(value);\n        }\n        if (value instanceof TargetedHTMLDirective) {\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof HTMLDirective) {\n            // Since not all values are directives, we can't use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n", "import { DOM } from \"../dom\";\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nexport class ElementStyles {\n    constructor() {\n        this.targets = new WeakSet();\n        /** @internal */\n        this.behaviors = null;\n    }\n    /** @internal */\n    addStylesTo(target) {\n        this.targets.add(target);\n    }\n    /** @internal */\n    removeStylesFrom(target) {\n        this.targets.delete(target);\n    }\n    /** @internal */\n    isAttachedTo(target) {\n        return this.targets.has(target);\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n}\n/**\n * Create ElementStyles from ComposableStyles.\n */\nElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => \n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nexport class AdoptedStyleSheetsStyles extends ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.styleSheetCache = styleSheetCache;\n        this._styleSheets = void 0;\n        this.behaviors = reduceBehaviors(styles);\n    }\n    get styleSheets() {\n        if (this._styleSheets === void 0) {\n            const styles = this.styles;\n            const styleSheetCache = this.styleSheetCache;\n            this._styleSheets = reduceStyles(styles).map((x) => {\n                if (x instanceof CSSStyleSheet) {\n                    return x;\n                }\n                let sheet = styleSheetCache.get(x);\n                if (sheet === void 0) {\n                    sheet = new CSSStyleSheet();\n                    sheet.replaceSync(x);\n                    styleSheetCache.set(x, sheet);\n                }\n                return sheet;\n            });\n        }\n        return this._styleSheets;\n    }\n    addStylesTo(target) {\n        target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...this.styleSheets];\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        const sourceSheets = this.styleSheets;\n        target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sourceSheets.indexOf(x) === -1);\n        super.removeStylesFrom(target);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nexport class StyleElementStyles extends ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        target = this.normalizeTarget(target);\n        for (let i = styleSheets.length - 1; i > -1; --i) {\n            const element = document.createElement(\"style\");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.prepend(element);\n        }\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        target = this.normalizeTarget(target);\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n        super.removeStylesFrom(target);\n    }\n    isAttachedTo(target) {\n        return super.isAttachedTo(this.normalizeTarget(target));\n    }\n    normalizeTarget(target) {\n        return target === document ? document.body : target;\n    }\n}\n", "import { Observable } from \"../observation/observable\";\nimport { DOM } from \"../dom\";\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nexport const booleanConverter = {\n    toView(value) {\n        return value ? \"true\" : \"false\";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === \"false\" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nexport const nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nexport class AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === \"boolean\" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === \"fromView\") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case \"reflect\":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case \"boolean\":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(Owner.attributes);\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === \"string\") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nexport function attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        const attributes = $target.constructor.attributes ||\n            ($target.constructor.attributes = []);\n        attributes.push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n", "import { Observable } from \"../observation/observable\";\nimport { ElementStyles } from \"../styles/element-styles\";\nimport { AttributeDefinition } from \"./attributes\";\nconst defaultShadowOptions = { mode: \"open\" };\nconst defaultElementOptions = {};\nconst fastDefinitions = new Map();\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nexport class FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === \"string\") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof ElementStyles\n                        ? nameOrConfig.styles\n                        : ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (!this.isDefined) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, \"observedAttributes\", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n            fastDefinitions.set(type, this);\n            this.isDefined = true;\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n    /**\n     * Gets the element definition associated with the specified type.\n     * @param type - The custom element type to retrieve the definition for.\n     */\n    static forType(type) {\n        return fastDefinitions.get(type);\n    }\n}\n", "import { DOM } from \"../dom\";\nimport { PropertyChangeNotifier } from \"../observation/notifier\";\nimport { defaultExecutionContext, Observable } from \"../observation/observable\";\nimport { FASTElementDefinition } from \"./fast-definitions\";\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n    cancelable: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nexport class Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        this._isConnected = false;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === \"closed\") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we'll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Indicates whether or not the custom element has been\n     * connected to the document.\n     */\n    get isConnected() {\n        Observable.track(this, \"isConnected\");\n        return this._isConnected;\n    }\n    setIsConnected(value) {\n        this._isConnected = value;\n        Observable.notify(this, \"isConnected\");\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.prepend(styles);\n        }\n        else if (!styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.addStylesTo(target);\n            if (sourceBehaviors !== null) {\n                this.addBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.removeChild(styles);\n        }\n        else if (styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.removeStylesFrom(target);\n            if (sourceBehaviors !== null) {\n                this.removeBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = new Map());\n        const length = behaviors.length;\n        const behaviorsToBind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);\n            }\n            else {\n                targetBehaviors.set(behavior, 1);\n                behaviorsToBind.push(behavior);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToBind.length; ++i) {\n                behaviorsToBind[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     * @param force - Forces unbinding of behaviors.\n     */\n    removeBehaviors(behaviors, force = false) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        const behaviorsToUnbind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                const count = targetBehaviors.get(behavior) - 1;\n                count === 0 || force\n                    ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior)\n                    : targetBehaviors.set(behavior, count);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToUnbind.length; ++i) {\n                behaviorsToUnbind[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this._isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (const [behavior] of behaviors) {\n                behavior.bind(element, defaultExecutionContext);\n            }\n        }\n        this.setIsConnected(true);\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (!this._isConnected) {\n            return;\n        }\n        this.setIsConnected(false);\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (const [behavior] of behaviors) {\n                behavior.unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this._isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there's no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root's content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn't one, then that means\n        // we're doing a Light DOM render to the element's direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there's already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error(\"Missing FASTElement definition.\");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n", "import { Controller } from \"./controller\";\nimport { FASTElementDefinition } from \"./fast-definitions\";\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nexport const FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nexport function customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n", "/**\n * Directive for use in {@link css}.\n *\n * @public\n */\nexport class CSSDirective {\n    /**\n     * Creates a CSS fragment to interpolate into the CSS document.\n     * @returns - the string to interpolate into CSS\n     */\n    createCSS() {\n        return \"\";\n    }\n    /**\n     * Creates a behavior to bind to the host element.\n     * @returns - the behavior to bind to the host element, or undefined.\n     */\n    createBehavior() {\n        return undefined;\n    }\n}\n", "import { CSSDirective } from \"./css-directive\";\nimport { ElementStyles } from \"./element-styles\";\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = \"\";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== \"\") {\n                styles.push(cssString);\n                cssString = \"\";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nexport function css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends CSSDirective {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = \"\";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === \"string\") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nexport function cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n", "import { emptyArray } from \"../platform\";\n/** @internal */\nexport function newSplice(index, removed, addedCount) {\n    return {\n        index: index,\n        removed: removed,\n        addedCount: addedCount,\n    };\n}\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    const rowCount = oldEnd - oldStart + 1;\n    const columnCount = currentEnd - currentStart + 1;\n    const distances = new Array(rowCount);\n    let north;\n    let west;\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; ++i) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n    }\n    // Initialize null row\n    for (let j = 0; j < columnCount; ++j) {\n        distances[0][j] = j;\n    }\n    for (let i = 1; i < rowCount; ++i) {\n        for (let j = 1; j < columnCount; ++j) {\n            if (current[currentStart + j - 1] === old[oldStart + i - 1]) {\n                distances[i][j] = distances[i - 1][j - 1];\n            }\n            else {\n                north = distances[i - 1][j] + 1;\n                west = distances[i][j - 1] + 1;\n                distances[i][j] = north < west ? north : west;\n            }\n        }\n    }\n    return distances;\n}\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    const edits = [];\n    while (i > 0 || j > 0) {\n        if (i === 0) {\n            edits.push(EDIT_ADD);\n            j--;\n            continue;\n        }\n        if (j === 0) {\n            edits.push(EDIT_DELETE);\n            i--;\n            continue;\n        }\n        const northWest = distances[i - 1][j - 1];\n        const west = distances[i - 1][j];\n        const north = distances[i][j - 1];\n        let min;\n        if (west < north) {\n            min = west < northWest ? west : northWest;\n        }\n        else {\n            min = north < northWest ? north : northWest;\n        }\n        if (min === northWest) {\n            if (northWest === current) {\n                edits.push(EDIT_LEAVE);\n            }\n            else {\n                edits.push(EDIT_UPDATE);\n                current = northWest;\n            }\n            i--;\n            j--;\n        }\n        else if (min === west) {\n            edits.push(EDIT_DELETE);\n            i--;\n            current = west;\n        }\n        else {\n            edits.push(EDIT_ADD);\n            j--;\n            current = north;\n        }\n    }\n    edits.reverse();\n    return edits;\n}\nfunction sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; ++i) {\n        if (current[i] !== old[i]) {\n            return i;\n        }\n    }\n    return searchLength;\n}\nfunction sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && current[--index1] === old[--index2]) {\n        count++;\n    }\n    return count;\n}\nfunction intersect(start1, end1, start2, end2) {\n    // Disjoint\n    if (end1 < start2 || end2 < start1) {\n        return -1;\n    }\n    // Adjacent\n    if (end1 === start2 || end2 === start1) {\n        return 0;\n    }\n    // Non-zero intersect, span1 first\n    if (start1 < start2) {\n        if (end1 < end2) {\n            return end1 - start2; // Overlap\n        }\n        return end2 - start2; // Contained\n    }\n    // Non-zero intersect, span2 first\n    if (end2 < end1) {\n        return end2 - start1; // Overlap\n    }\n    return end1 - start1; // Contained\n}\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n/**\n * @internal\n * @remarks\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n */\nexport function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart === 0 && oldStart === 0) {\n        prefixCount = sharedPrefix(current, old, minLength);\n    }\n    if (currentEnd === current.length && oldEnd === old.length) {\n        suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n    }\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {\n        return emptyArray;\n    }\n    if (currentStart === currentEnd) {\n        const splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd) {\n            splice.removed.push(old[oldStart++]);\n        }\n        return [splice];\n    }\n    else if (oldStart === oldEnd) {\n        return [newSplice(currentStart, [], currentEnd - currentStart)];\n    }\n    const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n    const splices = [];\n    let splice = void 0;\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; ++i) {\n        switch (ops[i]) {\n            case EDIT_LEAVE:\n                if (splice !== void 0) {\n                    splices.push(splice);\n                    splice = void 0;\n                }\n                index++;\n                oldIndex++;\n                break;\n            case EDIT_UPDATE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            case EDIT_ADD:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.addedCount++;\n                index++;\n                break;\n            case EDIT_DELETE:\n                if (splice === void 0) {\n                    splice = newSplice(index, [], 0);\n                }\n                splice.removed.push(old[oldIndex]);\n                oldIndex++;\n                break;\n            // no default\n        }\n    }\n    if (splice !== void 0) {\n        splices.push(splice);\n    }\n    return splices;\n}\nconst $push = Array.prototype.push;\nfunction mergeSplice(splices, index, removed, addedCount) {\n    const splice = newSplice(index, removed, addedCount);\n    let inserted = false;\n    let insertionOffset = 0;\n    for (let i = 0; i < splices.length; i++) {\n        const current = splices[i];\n        current.index += insertionOffset;\n        if (inserted) {\n            continue;\n        }\n        const intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);\n        if (intersectCount >= 0) {\n            // Merge the two splices\n            splices.splice(i, 1);\n            i--;\n            insertionOffset -= current.addedCount - current.removed.length;\n            splice.addedCount += current.addedCount - intersectCount;\n            const deleteCount = splice.removed.length + current.removed.length - intersectCount;\n            if (!splice.addedCount && !deleteCount) {\n                // merged splice is a noop. discard.\n                inserted = true;\n            }\n            else {\n                let currentRemoved = current.removed;\n                if (splice.index < current.index) {\n                    // some prefix of splice.removed is prepended to current.removed.\n                    const prepend = splice.removed.slice(0, current.index - splice.index);\n                    $push.apply(prepend, currentRemoved);\n                    currentRemoved = prepend;\n                }\n                if (splice.index + splice.removed.length >\n                    current.index + current.addedCount) {\n                    // some suffix of splice.removed is appended to current.removed.\n                    const append = splice.removed.slice(current.index + current.addedCount - splice.index);\n                    $push.apply(currentRemoved, append);\n                }\n                splice.removed = currentRemoved;\n                if (current.index < splice.index) {\n                    splice.index = current.index;\n                }\n            }\n        }\n        else if (splice.index < current.index) {\n            // Insert splice here.\n            inserted = true;\n            splices.splice(i, 0, splice);\n            i++;\n            const offset = splice.addedCount - splice.removed.length;\n            current.index += offset;\n            insertionOffset += offset;\n        }\n    }\n    if (!inserted) {\n        splices.push(splice);\n    }\n}\nfunction createInitialSplices(changeRecords) {\n    const splices = [];\n    for (let i = 0, ii = changeRecords.length; i < ii; i++) {\n        const record = changeRecords[i];\n        mergeSplice(splices, record.index, record.removed, record.addedCount);\n    }\n    return splices;\n}\n/** @internal */\nexport function projectArraySplices(array, changeRecords) {\n    let splices = [];\n    const initialSplices = createInitialSplices(changeRecords);\n    for (let i = 0, ii = initialSplices.length; i < ii; ++i) {\n        const splice = initialSplices[i];\n        if (splice.addedCount === 1 && splice.removed.length === 1) {\n            if (splice.removed[0] !== array[splice.index]) {\n                splices.push(splice);\n            }\n            continue;\n        }\n        splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));\n    }\n    return splices;\n}\n", "import { DOM } from \"../dom\";\nimport { calcSplices, newSplice, projectArraySplices } from \"./array-change-records\";\nimport { SubscriberSet } from \"./notifier\";\nimport { Observable } from \"./observable\";\nlet arrayObservationEnabled = false;\nfunction adjustIndex(changeRecord, array) {\n    let index = changeRecord.index;\n    const arrayLength = array.length;\n    if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n    }\n    else if (index < 0) {\n        index =\n            arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n    }\n    if (index < 0) {\n        index = 0;\n    }\n    changeRecord.index = index;\n    return changeRecord;\n}\nclass ArrayObserver extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.oldCollection = void 0;\n        this.splices = void 0;\n        this.needsQueue = true;\n        this.call = this.flush;\n        source.$fastController = this;\n    }\n    addSplice(splice) {\n        if (this.splices === void 0) {\n            this.splices = [splice];\n        }\n        else {\n            this.splices.push(splice);\n        }\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    reset(oldCollection) {\n        this.oldCollection = oldCollection;\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    flush() {\n        const splices = this.splices;\n        const oldCollection = this.oldCollection;\n        if (splices === void 0 && oldCollection === void 0) {\n            return;\n        }\n        this.needsQueue = true;\n        this.splices = void 0;\n        this.oldCollection = void 0;\n        const finalSplices = oldCollection === void 0\n            ? projectArraySplices(this.source, splices)\n            : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n        this.notify(finalSplices);\n    }\n}\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\nexport function enableArrayObservation() {\n    if (arrayObservationEnabled) {\n        return;\n    }\n    arrayObservationEnabled = true;\n    Observable.setArrayObserverFactory((collection) => {\n        return new ArrayObserver(collection);\n    });\n    const arrayProto = Array.prototype;\n    const pop = arrayProto.pop;\n    const push = arrayProto.push;\n    const reverse = arrayProto.reverse;\n    const shift = arrayProto.shift;\n    const sort = arrayProto.sort;\n    const splice = arrayProto.splice;\n    const unshift = arrayProto.unshift;\n    arrayProto.pop = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = pop.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(this.length, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    arrayProto.push = function () {\n        const methodCallResult = push.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n    arrayProto.reverse = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = reverse.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    arrayProto.shift = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = shift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(0, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    arrayProto.sort = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = sort.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    arrayProto.splice = function () {\n        const methodCallResult = splice.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n        }\n        return methodCallResult;\n    };\n    arrayProto.unshift = function () {\n        const methodCallResult = unshift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n}\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n", "import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\n/**\n * The runtime behavior for template references.\n * @public\n */\nexport class RefBehavior {\n    /**\n     * Creates an instance of RefBehavior.\n     * @param target - The element to reference.\n     * @param propertyName - The name of the property to assign the reference to.\n     */\n    constructor(target, propertyName) {\n        this.target = target;\n        this.propertyName = propertyName;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        source[this.propertyName] = this.target;\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    unbind() { }\n}\n/**\n * A directive that observes the updates a property with a reference to the element.\n * @param propertyName - The name of the property to assign the reference to.\n * @public\n */\nexport function ref(propertyName) {\n    return new AttachedBehaviorHTMLDirective(\"fast-ref\", RefBehavior, propertyName);\n}\n", "/**\n * A directive that enables basic conditional rendering in a template.\n * @param binding - The condition to test for rendering.\n * @param templateOrTemplateBinding - The template or a binding that gets\n * the template to render when the condition is true.\n * @public\n */\nexport function when(binding, templateOrTemplateBinding) {\n    const getTemplate = typeof templateOrTemplateBinding === \"function\"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return (source, context) => binding(source, context) ? getTemplate(source, context) : null;\n}\n", "import { DOM } from \"../dom\";\nimport { Observable, } from \"../observation/observable\";\nimport { enableArrayObservation } from \"../observation/array-observer\";\nimport { emptyArray } from \"../platform\";\nimport { HTMLDirective } from \"./html-directive\";\nimport { HTMLView } from \"./view\";\nconst defaultRepeatOptions = Object.freeze({\n    positioning: false,\n});\nfunction bindWithoutPositioning(view, items, index, context) {\n    view.bind(items[index], context);\n}\nfunction bindWithPositioning(view, items, index, context) {\n    const childContext = Object.create(context);\n    childContext.index = index;\n    childContext.length = items.length;\n    view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\nexport class RepeatBehavior {\n    /**\n     * Creates an instance of RepeatBehavior.\n     * @param location - The location in the DOM to render the repeat.\n     * @param itemsBinding - The array to render.\n     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n     * @param templateBinding - The template to render for each item.\n     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n        this.location = location;\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        this.source = null;\n        this.views = [];\n        this.items = null;\n        this.itemsObserver = null;\n        this.originalContext = void 0;\n        this.childContext = void 0;\n        this.bindView = bindWithoutPositioning;\n        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n        if (options.positioning) {\n            this.bindView = bindWithPositioning;\n        }\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source, context) {\n        this.source = source;\n        this.originalContext = context;\n        this.childContext = Object.create(context);\n        this.childContext.parent = source;\n        this.childContext.parentContext = this.originalContext;\n        this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n        this.template = this.templateBindingObserver.observe(source, this.originalContext);\n        this.observeItems(true);\n        this.refreshAllViews();\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.source = null;\n        this.items = null;\n        if (this.itemsObserver !== null) {\n            this.itemsObserver.unsubscribe(this);\n        }\n        this.unbindAllViews();\n        this.itemsBindingObserver.disconnect();\n        this.templateBindingObserver.disconnect();\n    }\n    /** @internal */\n    handleChange(source, args) {\n        if (source === this.itemsBinding) {\n            this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n            this.observeItems();\n            this.refreshAllViews();\n        }\n        else if (source === this.templateBinding) {\n            this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n            this.refreshAllViews(true);\n        }\n        else {\n            this.updateViews(args);\n        }\n    }\n    observeItems(force = false) {\n        if (!this.items) {\n            this.items = emptyArray;\n            return;\n        }\n        const oldObserver = this.itemsObserver;\n        const newObserver = (this.itemsObserver = Observable.getNotifier(this.items));\n        const hasNewObserver = oldObserver !== newObserver;\n        if (hasNewObserver && oldObserver !== null) {\n            oldObserver.unsubscribe(this);\n        }\n        if (hasNewObserver || force) {\n            newObserver.subscribe(this);\n        }\n    }\n    updateViews(splices) {\n        const childContext = this.childContext;\n        const views = this.views;\n        const totalRemoved = [];\n        const bindView = this.bindView;\n        let removeDelta = 0;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            const removed = splice.removed;\n            totalRemoved.push(...views.splice(splice.index + removeDelta, removed.length));\n            removeDelta -= splice.addedCount;\n        }\n        const items = this.items;\n        const template = this.template;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            let addIndex = splice.index;\n            const end = addIndex + splice.addedCount;\n            for (; addIndex < end; ++addIndex) {\n                const neighbor = views[addIndex];\n                const location = neighbor ? neighbor.firstChild : this.location;\n                const view = totalRemoved.length > 0 ? totalRemoved.shift() : template.create();\n                views.splice(addIndex, 0, view);\n                bindView(view, items, addIndex, childContext);\n                view.insertBefore(location);\n            }\n        }\n        for (let i = 0, ii = totalRemoved.length; i < ii; ++i) {\n            totalRemoved[i].dispose();\n        }\n        if (this.options.positioning) {\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const currentContext = views[i].context;\n                currentContext.length = ii;\n                currentContext.index = i;\n            }\n        }\n    }\n    refreshAllViews(templateChanged = false) {\n        const items = this.items;\n        const childContext = this.childContext;\n        const template = this.template;\n        const location = this.location;\n        const bindView = this.bindView;\n        let itemsLength = items.length;\n        let views = this.views;\n        let viewsLength = views.length;\n        if (itemsLength === 0 || templateChanged) {\n            // all views need to be removed\n            HTMLView.disposeContiguousBatch(views);\n            viewsLength = 0;\n        }\n        if (viewsLength === 0) {\n            // all views need to be created\n            this.views = views = new Array(itemsLength);\n            for (let i = 0; i < itemsLength; ++i) {\n                const view = template.create();\n                bindView(view, items, i, childContext);\n                views[i] = view;\n                view.insertBefore(location);\n            }\n        }\n        else {\n            // attempt to reuse existing views with new data\n            let i = 0;\n            for (; i < itemsLength; ++i) {\n                if (i < viewsLength) {\n                    const view = views[i];\n                    bindView(view, items, i, childContext);\n                }\n                else {\n                    const view = template.create();\n                    bindView(view, items, i, childContext);\n                    views.push(view);\n                    view.insertBefore(location);\n                }\n            }\n            const removed = views.splice(i, viewsLength - i);\n            for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n                removed[i].dispose();\n            }\n        }\n    }\n    unbindAllViews() {\n        const views = this.views;\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            views[i].unbind();\n        }\n    }\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\nexport class RepeatDirective extends HTMLDirective {\n    /**\n     * Creates an instance of RepeatDirective.\n     * @param itemsBinding - The binding that provides the array to render.\n     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(itemsBinding, templateBinding, options) {\n        super();\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createBlockPlaceholder;\n        enableArrayObservation();\n        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     */\n    createBehavior(target) {\n        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n    }\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\nexport function repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n    const templateBinding = typeof templateOrTemplateBinding === \"function\"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return new RepeatDirective(itemsBinding, templateBinding, options);\n}\n", "import { Observable } from \"../observation/observable\";\nimport { emptyArray } from \"../platform\";\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nexport function elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nexport class NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n", "import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nexport class SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener(\"slotchange\", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener(\"slotchange\", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nexport function slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-slotted\", SlottedBehavior, propertyOrOptions);\n}\n", "import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for child node observation.\n * @public\n */\nexport class ChildrenBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of ChildrenBehavior.\n     * @param target - The element target to observe children on.\n     * @param options - The options to use when observing the element children.\n     */\n    constructor(target, options) {\n        super(target, options);\n        this.observer = null;\n        options.childList = true;\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        if (this.observer === null) {\n            this.observer = new MutationObserver(this.handleEvent.bind(this));\n        }\n        this.observer.observe(this.target, this.options);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        if (\"subtree\" in this.options) {\n            return Array.from(this.target.querySelectorAll(this.options.selector));\n        }\n        return Array.from(this.target.childNodes);\n    }\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\nexport function children(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = {\n            property: propertyOrOptions,\n        };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-children\", ChildrenBehavior, propertyOrOptions);\n}\n", "import type {\n  Constructor,\n  Data,\n  Entries,\n  GraphQLError,\n  MaybeTDN,\n  MaybeVariables,\n} from '@apollo-elements/core/types';\n\nimport type * as C from '@apollo/client/core';\n\nimport type { CustomElement } from '@apollo-elements/core/types';\n\nimport type { ApolloController } from '@apollo-elements/core';\n\nimport { hosted } from './decorators.js';\n\nimport { update } from '@apollo-elements/core/apollo-controller';\n\nimport { ApolloElementMixin } from '@apollo-elements/mixins/apollo-element-mixin';\nimport { DOM, FASTElement, attr, observable } from '@microsoft/fast-element';\n\n/**\n * `ApolloElement`\n *\n * \uD83D\uDE80 Custom element base class for Apollo FAST elements.\n *\n * See [`ApolloElementInterface`](https://apolloelements.dev/api/core/interfaces/element) for more information on events\n *\n * @element\n */\nexport class ApolloElement<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloElementMixin(FASTElement as Constructor<FASTElement & CustomElement>)<D, V> {\n  declare controller: ApolloController<D, V>;\n\n  readyToReceiveDocument = false;\n\n  @observable called = false;\n\n  /** @summary Whether a request is in flight. */\n  @hosted()\n  @attr({ mode: 'boolean' })\n  loading = false;\n\n  /** @summary The Apollo Client instance */\n  @hosted()\n  @observable\n  client: C.ApolloClient<C.NormalizedCacheObject> | null = window.__APOLLO_CLIENT__ ?? null;\n\n  /** @summary Latest Data. */\n  @hosted()\n  @observable\n  data: Data<D>|null = null;\n\n  /** @summary Latest error */\n  @hosted()\n  @observable\n  error: Error | C.ApolloError | null = null;\n\n  /** @summary Latest errors */\n  @hosted()\n  @observable\n  errors: readonly GraphQLError[] = [];\n\n  get updateComplete(): Promise<boolean> {\n    return DOM.nextUpdate().then(() => true);\n  }\n\n  [update](properties: Partial<this>): void {\n    for (const [k, v] of Object.entries(properties) as Entries<this>)\n      (this[k] !== v) && (this[k] = v);\n  }\n}\n", "import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n};\r\n", "const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(method: M) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also export processStub, so you can import { invariant, processStub } from\n// \"ts-invariant\" and assign processStub to a local variable named process.\nexport const processStub: {\n  env: Record<string, any>;\n  [key: string]: any;\n} = (\n  typeof process === \"object\" &&\n  typeof process.env === \"object\"\n) ? process : { env: {} };\n\nexport { processStub as process };\n\nexport default invariant;\n", "/**\n * The current status of a query\u2019s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus,\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n", "/* Core */\n\nexport {\n  ApolloClient,\n  ApolloClientOptions,\n  DefaultOptions,\n  mergeOptions,\n} from './ApolloClient';\nexport {\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n} from './ObservableQuery';\nexport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  FetchPolicy,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  MutationUpdaterFn,\n} from './watchQueryOptions';\nexport { NetworkStatus } from './networkStatus';\nexport * from './types';\nexport {\n  Resolver,\n  FragmentMatcher,\n} from './LocalState';\nexport { isApolloError, ApolloError } from '../errors';\n\n/* Cache */\n\nexport {\n  // All the exports (types and values) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Cache,\n  ApolloCache,\n  Transaction,\n  DataProxy,\n  InMemoryCache,\n  InMemoryCacheConfig,\n  MissingFieldError,\n  defaultDataIdFromObject,\n  ReactiveVar,\n  makeVar,\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n} from '../cache';\n\nexport * from '../cache/inmemory/types';\n\n/* Link */\n\nexport * from '../link/core';\nexport * from '../link/http';\nexport {\n  fromError,\n  toPromise,\n  fromPromise,\n  ServerError,\n  throwServerError,\n} from '../link/utils';\n\n/* Utilities */\n\nexport {\n  Observable,\n  Observer,\n  ObservableSubscription,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n} from '../utilities';\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity }\nsetVerbosity(\"log\");\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport {\n  default as gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n} from 'graphql-tag';\n", "const configurable = true;\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function bound(_: any, key: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n  if (typeof descriptor?.value !== 'function')\n    throw new TypeError(`Only methods can be decorated with @bound. <${key ?? _.name}> is not a method!`); /* c8 ignore next */\n  return {\n    configurable,\n    get() {\n      const value = descriptor.value.bind(this);\n      Object.defineProperty(this, key, { value, configurable, writable: true });\n      return value;\n    },\n  };\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nimport type {\n  ComponentDocument,\n  Data,\n  FetchMoreParams,\n  MaybeTDN,\n  MaybeVariables,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  DocumentNode,\n  ObservableQuery,\n  QueryOptions,\n  SubscribeToMoreOptions,\n  SubscriptionOptions,\n  WatchQueryOptions,\n} from '@apollo/client/core';\n\nimport { NetworkStatus } from '@apollo/client/core';\n\nimport { ApolloController, ApolloControllerOptions } from './apollo-controller.js';\n\nimport { bound } from './lib/bound.js';\n\nexport interface ApolloQueryControllerOptions<D, V> extends\n    ApolloControllerOptions<D, V>,\n    Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> {\n  variables?: Variables<D, V>;\n  noAutoSubscribe?: boolean;\n  shouldSubscribe?: (options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>) => boolean;\n  onData?: (data: Data<D>) => void;\n  onError?: (error: Error) => void;\n}\n\nexport class ApolloQueryController<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloController<D, V>\n  implements ReactiveController {\n  private observableQuery?: ObservableQuery<Data<D>, Variables<D, V>>;\n\n  private pollingInterval?: number;\n\n  /** @summary Options to customize the query and to interface with the controller. */ // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/40220\n  declare options: ApolloQueryControllerOptions<D, V>;\n\n  /**\n   * `networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\n   * depending on your network status as it provides a more detailed view into the state of a network request\n   * on your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\n   * These number values each represent a different network state.\n   *\n   * 1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n   * 2. `setVariables`: If a query\u2019s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n   * 3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n   * 4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n   * 5. Unused.\n   * 6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n   * 7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n   * 8. `error`: No request is in flight for this query, but one or more errors were detected.\n   *\n   * If the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\n   * replace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\n   * It is recommended that you use `loading`, however.\n   */\n  networkStatus = NetworkStatus.ready;\n\n  /**\n   * If data was read from the cache with missing fields,\n   * partial will be true. Otherwise, partial will be falsy.\n   *\n   * @summary True when the query returned partial data.\n   */\n  partial = false;\n\n  #hasDisconnected = false;\n\n  #lastQueryDocument?: DocumentNode;\n\n  /** @summary A GraphQL document containing a single query. */\n  get query(): ComponentDocument<D> | null { return this.document; }\n\n  set query(document: ComponentDocument<D> | null) { this.document = document; }\n\n  /** @summary Flags an element that's ready and able to auto-subscribe */\n  public get canAutoSubscribe(): boolean {\n    return (\n      !!this.client &&\n      !!this.document &&\n      !this.options.noAutoSubscribe &&\n      this.shouldSubscribe()\n    );\n  }\n\n  constructor(\n    host: ReactiveControllerHost,\n    query?: ComponentDocument<D> | null,\n    options?: ApolloQueryControllerOptions<D, V>\n  ) {\n    super(host, options);\n    this.init(query ?? null);/* c8 ignore next */\n  }\n\n  /** @summary initializes or reinitializes the query */\n  override hostConnected(): void {\n    super.hostConnected();\n    if (this.#hasDisconnected && this.observableQuery) { /* c8 ignore next */\n      this.observableQuery.reobserve();\n      this.#hasDisconnected = false;\n    } else\n      this.documentChanged(this.query);\n  }\n\n  override hostDisconnected(): void {\n    this.#hasDisconnected = true;\n    super.hostDisconnected();\n  }\n\n  private shouldSubscribe(opts?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>): boolean {\n    return this.options.shouldSubscribe?.(opts) ?? true;/* c8 ignore next */\n  }\n\n  /**\n   * Determines whether the element is able to automatically subscribe\n   */\n  private canSubscribe(\n    options?: Partial<SubscriptionOptions<Variables<D, V> | null, Data<D>>>\n  ): boolean {\n    /* c8 ignore next 4 */\n    return (\n      !(this.options.noAutoSubscribe ?? false) &&\n      !!this.client &&\n      !!(options?.query ?? this.document)\n    );\n  }\n\n  /**\n   * Creates an instance of ObservableQuery with the options provided by the element.\n   * - `context` Context to be passed to link execution chain\n   * - `errorPolicy` Specifies the ErrorPolicy to be used for this query\n   * - `fetchPolicy` Specifies the FetchPolicy to be used for this query\n   * - `fetchResults` Whether or not to fetch results\n   * - `metadata` Arbitrary metadata stored in the store with this query. Designed for debugging, developer tools, etc.\n   * - `notifyOnNetworkStatusChange` Whether or not updates to the network status should trigger next on the observer of this query\n   * - `pollInterval` The time interval (in milliseconds) on which this query should be refetched from the server.\n   * - `query` A GraphQL document that consists of a single query to be sent down to the server.\n   * - `variables` A map going from variable name to variable value, where the variables are used within the GraphQL query.\n   */\n  @bound private watchQuery(\n    params?: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>\n  ): ObservableQuery<Data<D>, Variables<D, V>> {\n    if (!this.client)\n      throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // covered\n\n    return this.client.watchQuery({\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      query: this.query!,\n      variables: this.variables ?? undefined,\n      context: this.options.context,\n      errorPolicy: this.options.errorPolicy,\n      fetchPolicy: this.options.fetchPolicy,\n      notifyOnNetworkStatusChange: this.options.notifyOnNetworkStatusChange,\n      partialRefetch: this.options.partialRefetch,\n      pollInterval: this.options.pollInterval,\n      returnPartialData: this.options.returnPartialData,\n      nextFetchPolicy: this.options.nextFetchPolicy,\n      ...params,\n    }) as ObservableQuery<Data<D>, Variables<D, V>>;\n  }\n\n  private nextData(result: ApolloQueryResult<Data<D>>): void {\n    this.emitter.dispatchEvent(new CustomEvent('apollo-query-result', { detail: result }));\n    this.data = result.data;\n    this.error = result.error ?? null;/* c8 ignore next */\n    this.errors = result.errors ?? [];\n    this.loading = result.loading ?? false;/* c8 ignore next */\n    this.networkStatus = result.networkStatus;\n    this.partial = result.partial ?? false;\n    this.options.onData?.(result.data);/* c8 ignore next */\n    this.notify('data', 'error', 'errors', 'loading', 'networkStatus', 'partial');\n  }\n\n  private nextError(error: ApolloError): void {\n    this.emitter.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n    this.error = error;\n    this.loading = false;\n    this.options.onError?.(error);/* c8 ignore next */\n    this.notify('error', 'loading');\n  }\n\n  protected override clientChanged(): void {\n    if (this.canSubscribe() && this.shouldSubscribe())/* c8 ignore next */\n      this.subscribe();/* c8 ignore next */\n  }\n\n  protected override documentChanged(doc?: ComponentDocument<D> | null): void {\n    const query = doc ?? undefined;/* c8 ignore next */\n    if (doc === this.#lastQueryDocument)\n      return;/* c8 ignore next */\n    if (this.canSubscribe({ query }) && this.shouldSubscribe({ query }))/* c8 ignore next */\n      this.subscribe({ query }); /* c8 ignore next */ // covered\n  }\n\n  protected override variablesChanged(variables?: Variables<D, V>): void {\n    if (this.observableQuery)\n      this.refetch(variables);/* c8 ignore next */\n    else if (this.canSubscribe({ variables }) && this.shouldSubscribe({ variables }))/* c8 ignore next */\n      this.subscribe({ variables });/* c8 ignore next */\n  }\n\n  /**\n   * Exposes the [`ObservableQuery#refetch`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.refetch) method.\n   *\n   * @param variables The new set of variables. If there are missing variables, the previous values of those variables will be used.\n   */\n  @bound public async refetch(variables?: Variables<D, V>): Promise<ApolloQueryResult<Data<D>>> {\n    if (!this.observableQuery)\n      throw new Error('Cannot refetch without an ObservableQuery'); /* c8 ignore next */ // covered\n    return this.observableQuery.refetch(variables as Variables<D, V>);\n  }\n\n  /**\n   * Resets the observableQuery and subscribes.\n   * @param params options for controlling how the subscription subscribes\n   */\n  @bound public subscribe(\n    params?: Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>\n  ): ZenObservable.Subscription {\n    if (this.observableQuery)\n      this.observableQuery.stopPolling(); /* c8 ignore next */ // covered\n\n    this.observableQuery = this.watchQuery({\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      query: this.query!,\n      variables: this.variables ?? undefined,\n      context: this.options.context,\n      errorPolicy: this.options.errorPolicy,\n      fetchPolicy: this.options.fetchPolicy,\n      pollInterval: this.options.pollInterval,\n      notifyOnNetworkStatusChange: this.options.notifyOnNetworkStatusChange,\n      returnPartialData: this.options.returnPartialData,\n      partialRefetch: this.options.partialRefetch,\n      ...params,\n    });\n\n    this.#lastQueryDocument = params?.query ?? this.query ?? undefined;/* c8 ignore next */\n\n    this.loading = true;\n    this.notify('loading');\n\n    return this.observableQuery?.subscribe({\n      next: this.nextData.bind(this),\n      error: this.nextError.bind(this),\n    });\n  }\n\n  /**\n   * Lets you pass a GraphQL subscription and updateQuery function\n   * to subscribe to more updates for your query.\n   *\n   * The `updateQuery` parameter is a function that takes the previous query data,\n   * then a `{ subscriptionData: TSubscriptionResult }` object,\n   * and returns an object with updated query data based on the new results.\n   */\n  @bound public subscribeToMore<TSubscriptionVariables, TSubscriptionData>(\n    options: SubscribeToMoreOptions<Data<D>, TSubscriptionVariables, TSubscriptionData>\n  ): (() => void) | void {\n    return this.observableQuery?.subscribeToMore(options);\n  }\n\n  /**\n   * @summary Executes a Query once and updates the with the result\n   */\n  @bound public async executeQuery(\n    params?: Partial<QueryOptions<Variables<D, V>, Data<D>>>\n  ): Promise<ApolloQueryResult<Data<D>>> {\n    try {\n      if (!this.client)\n        throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // covered\n\n      this.loading = true;\n      this.notify('loading');\n\n      const result = await this.client.query<Data<D>, Variables<D, V>>({\n        // It's better to let Apollo client throw this error, if needs be\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        query: this.query!, variables: this.variables!,\n        context: this.options.context,\n        errorPolicy: this.options.errorPolicy,\n        fetchPolicy:\n            this.options.fetchPolicy === 'cache-and-network' ? undefined/* c8 ignore next */\n          : this.options.fetchPolicy,\n        notifyOnNetworkStatusChange: this.options.notifyOnNetworkStatusChange,\n        partialRefetch: this.options.partialRefetch,\n        returnPartialData: this.options.returnPartialData,\n        ...params,\n      });\n      if (result) // NB: not sure why, but sometimes this returns undefined\n        this.nextData(result);\n      return result;/* c8 ignore next */\n    } catch (error) {\n      this.nextError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exposes the `ObservableQuery#fetchMore` method.\n   * https://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n   *\n   * The optional `updateQuery` parameter is a function that takes the previous query data,\n   * then a `{ subscriptionData: TSubscriptionResult }` object,\n   * and returns an object with updated query data based on the new results.\n   *\n   * The optional `variables` parameter is an optional new variables object.\n   */\n  @bound public async fetchMore(\n    params?: Partial<FetchMoreParams<D, V>>\n  ): Promise<ApolloQueryResult<Data<D>>> {\n    this.loading = true;\n    this.notify('loading');\n\n    const options = {\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      query: this.query!,\n      context: this.options.context,\n      variables: this.variables,\n      ...params,\n    };\n\n    return (\n      this.observableQuery ??= this.watchQuery(\n        options as WatchQueryOptions<Variables<D, V>, Data<D>>\n      )\n    ).fetchMore({\n      ...options,\n      variables: (options.variables as Variables<D, V>) ?? undefined, /* c8 ignore next */\n    }).then(x => {\n      this.loading = false;\n      this.notify('loading');\n      return x;\n    });\n  }\n\n  /**\n   * @summary Start polling this query\n   * @param ms milliseconds to wait between fetches\n   */\n  @bound public startPolling(ms: number): void {\n    this.pollingInterval = window.setInterval(() => {\n      this.refetch();\n    }, ms);\n  }\n\n  /**\n   * @summary Stop polling this query\n   */\n  @bound public stopPolling(): void {\n    clearInterval(this.pollingInterval);\n  }\n}\n", "import type * as C from '@apollo/client/core';\n\nimport type {\n  ComponentDocument,\n  Constructor,\n  Data,\n  FetchMoreParams,\n  MaybeTDN,\n  MaybeVariables,\n  NextFetchPolicyFunction,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type { ApolloQueryElement } from '@apollo-elements/core/types';\n\nimport { NetworkStatus } from '@apollo/client/core';\n\nimport { ApolloElementMixin } from './apollo-element-mixin.js';\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { controlled } from '@apollo-elements/core/decorators';\n\nimport {\n  ApolloQueryController,\n  ApolloQueryControllerOptions,\n} from '@apollo-elements/core/apollo-query-controller';\n\ntype MixinInstance<B extends Constructor> = B & {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new <D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>(...a: any[]):\n    InstanceType<B> & ApolloQueryElement<D, V>;\n  documentType: 'query',\n}\n\n/**\n * `ApolloQueryMixin`: class mixin for apollo-query elements.\n */\nfunction ApolloQueryMixinImpl<B extends Constructor>(superclass: B): MixinInstance<B> {\n  class ApolloQueryElement<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n    extends ApolloElementMixin(superclass)<D, V> {\n    static override documentType: 'query' = 'query';\n\n    static override get observedAttributes(): string[] {\n      return [\n        ...super.observedAttributes as string[],\n        'next-fetch-policy',\n        'no-auto-subscribe',\n      ];\n    }\n\n    controller = new ApolloQueryController<D, V>(this, null, {\n      shouldSubscribe: x => this.readyToReceiveDocument && this.shouldSubscribe(x),\n      onData: data => this.onData?.(data), /* c8 ignore next */ // covered\n      onError: error => this.onError?.(error), /* c8 ignore next */ // covered\n    });\n\n    /** @summary The latest query data. */\n    declare data: Data<D> | null;\n\n    /**\n     * An object map from variable name to variable value, where the variables are used within the GraphQL query.\n     *\n     * Setting variables will initiate the query, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n     *\n     * @summary Query variables.\n     */\n    declare variables: Variables<D, V> | null;\n\n    get options(): ApolloQueryControllerOptions<D, V> {\n      return this.controller.options;\n    }\n\n    set options(options: ApolloQueryControllerOptions<D, V>) {\n      const { onData, onError } = this.controller.options;\n      this.controller.options = {\n        ...options,\n        onData,\n        onError,\n      };\n    }\n\n    /**\n     * If data was read from the cache with missing fields,\n     * partial will be true. Otherwise, partial will be falsy.\n     *\n     * @summary True when the query returned partial data.\n     */\n    @controlled({ readonly: true }) readonly partial = false;\n\n    /**\n     * `networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\n     * depending on your network status as it provides a more detailed view into the state of a network request\n     * on your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\n     * These number values each represent a different network state.\n     *\n     * 1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n     * 2. `setVariables`: If a query\u2019s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n     * 3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n     * 4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n     * 5. Unused.\n     * 6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n     * 7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n     * 8. `error`: No request is in flight for this query, but one or more errors were detected.\n     *\n     * If the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\n     * replace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\n     * It is recommended that you use `loading`, however.\n     */\n    @controlled() networkStatus: NetworkStatus = NetworkStatus.ready;\n\n    /** @summary A GraphQL document containing a single query. */\n    @controlled() query: ComponentDocument<D> | null = null;\n\n    /**\n     * Determines where the client may return a result from. The options are:\n     *\n     * - `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n     * - `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n     * - `cache-only`: return result from cache if available, fail otherwise.\n     * - `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n     * - `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n     * - `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.\n     *\n     * @summary The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.\n     * @attr fetch-policy\n     */\n    @controlled({ path: 'options' }) fetchPolicy?: C.WatchQueryFetchPolicy;\n\n    /**\n     * If true, perform a query refetch if the query result is marked as being partial,\n     * and the returned data is reset to an empty Object by the Apollo Client QueryManager\n     * (due to a cache miss).\n     *\n     * The default value is false for backwards-compatibility's sake,\n     * but should be changed to true for most use-cases.\n     *\n     * @summary Set to retry any partial query results.\n     */\n    @controlled({ path: 'options' }) partialRefetch?: boolean;\n\n    /**\n     * Opt into receiving partial results from the cache for queries\n     * that are not fully satisfied by the cache.\n     */\n    @controlled({ path: 'options' }) returnPartialData?: boolean;\n\n    /**\n     * When someone chooses cache-and-network or network-only as their\n     * initial FetchPolicy, they often do not want future cache updates to\n     * trigger unconditional network requests, which is what repeatedly\n     * applying the cache-and-network or network-only policies would seem\n     * to imply. Instead, when the cache reports an update after the\n     * initial network request, it may be desirable for subsequent network\n     * requests to be triggered only if the cache result is incomplete.\n     * The nextFetchPolicy option provides a way to update\n     * options.fetchPolicy after the intial network request, without\n     * having to set options.\n     *\n     * @summary Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`.\n     * @attr next-fetch-policy\n     */\n    @controlled({\n      path: 'options',\n      onSet(this: ApolloQueryElement, value: ApolloQueryElement['nextFetchPolicy']) {\n        if (value && typeof value !== 'function')\n          this.setAttribute('next-fetch-policy', value); /* c8 ignore next */ // covered\n        else\n          this.removeAttribute('next-fetch-policy');\n      },\n    })\n    nextFetchPolicy?: C.WatchQueryFetchPolicy | NextFetchPolicyFunction<D, V>;\n\n    /**\n     * When true, the component will not automatically subscribe to new data.\n     * Call the `subscribe()` method to do so.\n     * @attr no-auto-subscribe\n     */\n    @controlled({\n      path: 'options',\n      onSet(this: ApolloQueryElement, value: ApolloQueryElement['noAutoSubscribe']) {\n        this.toggleAttribute('no-auto-subscribe', !!value);\n      },\n    })\n    noAutoSubscribe = this.hasAttribute('no-auto-subscribe');\n\n    /**\n     * @summary Whether or not updates to the network status should trigger next on the observer of this query.\n     */\n    @controlled({ path: 'options' }) notifyOnNetworkStatusChange?: boolean;\n\n    /** @summary The time interval (in milliseconds) on which this query should be refetched from the server. */\n    @controlled({ path: 'options' }) pollInterval?: number;\n\n    /**\n     * Optional callback for when a query is completed.\n     * @param data the query data.\n     */\n    onData?(data: Data<D>): void\n\n    /**\n     * Optional callback for when an error occurs.\n     * @param error the error.\n     */\n    onError?(error: Error): void\n\n    /** @summary Flags an element that's ready and able to auto subscribe */\n    @controlled({ readonly: true }) readonly canAutoSubscribe = true;\n\n    override attributeChangedCallback(name: string, oldVal: string, newVal: string): void {\n      super.attributeChangedCallback?.(name, oldVal, newVal);\n      // @ts-expect-error: ts is not tracking the static side\n      if (super.constructor?.observedAttributes?.includes?.(name))\n        return; /* c8 ignore next */ // covered\n\n      switch (name) { /* c8 ignore next */ // covered\n        case 'next-fetch-policy':\n          // to allow for case where this.nextFetchPolicy is undefined\n          // eslint-disable-next-line eqeqeq\n          if (this.nextFetchPolicy != newVal)\n            this.nextFetchPolicy = newVal as C.WatchQueryFetchPolicy; /* c8 ignore next */ // covered\n          break;\n        case 'no-auto-subscribe':\n          this.noAutoSubscribe = newVal != null;\n      }\n    }\n\n    /**\n     * Exposes the [`ObservableQuery#refetch`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.refetch) method.\n     *\n     * @param variables The new set of variables. If there are missing variables, the previous values of those variables will be used..\n     */\n    async refetch(variables: Variables<D, V>): Promise<C.ApolloQueryResult<Data<D>>> {\n      return this.controller.refetch(variables);\n    }\n\n    /**\n     * Determines whether the element should attempt to automatically subscribe i.e. begin querying\n     *\n     * Override to prevent subscribing unless your conditions are met.\n     */\n    shouldSubscribe(\n      options?: Partial<C.SubscriptionOptions<Variables<D, V>, Data<D>>>\n    ): boolean {\n      return (void options, true);\n    }\n\n    /**\n     * Resets the observableQuery and subscribes.\n     * @param params options for controlling how the subscription subscribes\n     */\n    subscribe(\n      params?: Partial<C.SubscriptionOptions<Variables<D, V>, Data<D>>>\n    ): ZenObservable.Subscription {\n      return this.controller.subscribe(params);\n    }\n\n    /**\n     * Lets you pass a GraphQL subscription and updateQuery function\n     * to subscribe to more updates for your query.\n     *\n     * The `updateQuery` parameter is a function that takes the previous query data,\n     * then a `{ subscriptionData: TSubscriptionResult }` object,\n     * and returns an object with updated query data based on the new results.\n     */\n    subscribeToMore<TSubscriptionVariables, TSubscriptionData>(\n      options: C.SubscribeToMoreOptions<Data<D>, TSubscriptionVariables, TSubscriptionData>\n    ): void | (() => void) {\n      return this.controller.subscribeToMore(options);\n    }\n\n    /**\n     * Executes a Query once and updates the component with the result\n     */\n    async executeQuery(\n      params?: Partial<C.QueryOptions<Variables<D, V>, Data<D>>> | undefined\n    ): Promise<C.ApolloQueryResult<Data<D>>> {\n      return this.controller.executeQuery(params);\n    }\n\n    /**\n     * Exposes the `ObservableQuery#fetchMore` method.\n     * https://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n     *\n     * The optional `updateQuery` parameter is a function that takes the previous query data,\n     * then a `{ subscriptionData: TSubscriptionResult }` object,\n     * and returns an object with updated query data based on the new results.\n     *\n     * The optional `variables` parameter is an optional new variables object.\n     */\n    async fetchMore(\n      params?: Partial<FetchMoreParams<D, V>> | undefined\n    ): Promise<C.ApolloQueryResult<Data<D>>> {\n      return this.controller.fetchMore(params);\n    }\n  }\n\n  return ApolloQueryElement as unknown as MixinInstance<B>;\n}\n\n\nexport const ApolloQueryMixin =\n  dedupeMixin(ApolloQueryMixinImpl);\n", "import type {\n  Constructor,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  NextFetchPolicyFunction,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type {\n  ErrorPolicy,\n  WatchQueryFetchPolicy,\n} from '@apollo/client/core';\n\nimport { ApolloElement } from './apollo-element.js';\nimport { NetworkStatus } from '@apollo/client/core';\nimport { attr, nullableNumberConverter } from '@microsoft/fast-element';\nimport { ApolloQueryMixin } from '@apollo-elements/mixins/apollo-query-mixin';\n\nimport { hosted } from './decorators.js';\n\n/**\n * `ApolloQuery`\n *\n * \uD83D\uDE80 Custom element base class that connects to your Apollo cache.\n *\n * @element\n *\n * See [`ApolloQueryInterface`](https://apolloelements.dev/api/core/interfaces/query) for more information on events\n *\n */\nexport class ApolloQuery<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloQueryMixin(ApolloElement as Constructor<ApolloElement>)<D, V> {\n  /**\n   * Latest query data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object that maps from the name of a variable as used in the query GraphQL document to that variable's value.\n   *\n   * @summary Query variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  @hosted()\n  @attr({ converter: nullableNumberConverter })\n  networkStatus: NetworkStatus = NetworkStatus.ready;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'fetch-policy' })\n  fetchPolicy?: WatchQueryFetchPolicy;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'error-policy' })\n  errorPolicy?: ErrorPolicy;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'next-fetch-policy' })\n  nextFetchPolicy?: WatchQueryFetchPolicy | NextFetchPolicyFunction<D, V>;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'no-auto-subscribe', mode: 'boolean' })\n  noAutoSubscribe = false;\n}\n", "/** Splits a string by `,` then trims each of the results */\nexport function splitCommasAndTrim(value: string): string[] {\n  return value\n    .split(',')\n    .map(x => x.trim())\n    .filter(Boolean);\n}\n\n/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any */\ntype ObjectOrArray = object | any[];\n/* eslint-enable @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any */\n\n/**\n * Is an object or array empty?\n * @param  x object or array\n */\nexport function isEmpty(x: ObjectOrArray): boolean {\n  const { length } = Array.isArray(x) ? x : Object.keys(x);\n  return !length;\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nimport type {\n  ComponentDocument,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  OptimisticResponseType,\n  RefetchQueriesType,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type {\n  ApolloError,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  MutationOptions,\n  MutationUpdaterFn,\n} from '@apollo/client/core';\n\nimport { ApolloController, ApolloControllerOptions } from './apollo-controller.js';\n\nimport { bound } from './lib/bound.js';\n\nexport interface ApolloMutationControllerOptions<D, V> extends ApolloControllerOptions<D, V> {\n  /**\n   * An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.\n   *\n   * @summary Mutation variables.\n   */\n  variables?: Variables<D, V>,\n  refetchQueries?: RefetchQueriesType<D> | null,\n  context?: Record<string, unknown>,\n  optimisticResponse?: OptimisticResponseType<D, V>,\n  errorPolicy?: ErrorPolicy;\n  fetchPolicy?: Extract<FetchPolicy, 'no-cache'>,\n  awaitRefetchQueries?: boolean,\n  onCompleted?(data: Data<D>|null): void,\n  onError?(error: Error): void,\n  update?(\n    ...p: Parameters<MutationUpdaterFn<Data<D>>>\n  ): ReturnType<MutationUpdaterFn<Data<D>>>,\n  ignoreResults?: boolean,\n}\n\nexport class ApolloMutationController<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloController<D, V> implements ReactiveController {\n  /**\n   * The ID number of the most recent mutation since the element was instantiated.\n   */\n  private mostRecentMutationId = 0;\n\n  // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/40220\n  declare options: ApolloMutationControllerOptions<D, V>;\n\n  called = false;\n\n  get mutation(): ComponentDocument<D> | null { return this.document; }\n\n  set mutation(document: ComponentDocument<D> | null) { this.document = document; }\n\n  constructor(\n    host: ReactiveControllerHost,\n    mutation?: ComponentDocument<D> | null,\n    options?: ApolloMutationControllerOptions<D, V>\n  ) {\n    super(host, options);\n    this.init(mutation ?? null);/* c8 ignore next */\n  }\n\n  /**\n   * @summary Fires a mutation\n   * This resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error.\n   */\n  @bound public async mutate(\n    params?: Partial<MutationOptions<Data<D>, Variables<D, V>>>\n  ): Promise<FetchResult<Data<D>>> {\n    if (!this.client)\n      throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/'); /* c8 ignore next */ // covered\n    const mutationId = this.generateMutationId();\n\n    this.loading = true;\n    this.called = true;\n    this.error = null;\n    this.errors = [];\n    this.data = null;\n    this.notify('called', 'data', 'error', 'errors', 'loading');\n\n    return this.client.mutate<Data<D>, Variables<D, V>>({\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      mutation: this.mutation!,\n\n      awaitRefetchQueries: this.options.awaitRefetchQueries,\n      context: this.options.context,\n      errorPolicy: this.options.errorPolicy,\n      fetchPolicy: this.options.fetchPolicy,\n      optimisticResponse: this.options.optimisticResponse,\n      refetchQueries: this.options.refetchQueries ?? undefined,\n      update: this.options.update,\n      variables: this.variables ?? undefined,\n      ...params,\n    })\n      .then(this.onCompletedMutation.bind(this, mutationId))\n      .catch(this.onMutationError.bind(this, mutationId));\n  }\n\n  /**\n   * Increments and returns the most recent mutation id.\n   */\n  private generateMutationId(): number {\n    this.mostRecentMutationId += 1;\n    return this.mostRecentMutationId;\n  }\n\n  /**\n   * Returns true when an ID matches the most recent mutation id.\n   */\n  private isMostRecentMutation(mutationId: number): boolean {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  /**\n   * Callback for when a mutation is completed.\n   */\n  private onCompletedMutation(\n    mutationId: number,\n    response: FetchResult<Data<D>>\n  ): FetchResult<Data<D>> {\n    const { data } = response;\n    this.emitter.dispatchEvent(new CustomEvent('apollo-mutation-result', { detail: response }));\n    if (this.isMostRecentMutation(mutationId)) {\n      this.loading = false;\n      if (!this.options.ignoreResults) {\n        this.error = null;\n        this.data = data ?? null;/* c8 ignore next */\n        this.errors = response.errors ?? [];\n        this.options.onCompleted?.(this.data); /* c8 ignore next */\n      }\n      this.notify('data', 'error', 'errors', 'loading');\n    }\n    return response;\n  }\n\n  /**\n   * Callback for when a mutation fails.\n   */\n  private onMutationError(mutationId: number, error: ApolloError): never {\n    this.emitter.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n    if (this.isMostRecentMutation(mutationId)) {\n      this.loading = false;\n      this.data = null;\n      this.error = error;\n    }\n    this.options.onError?.(error);\n    this.notify('data', 'error', 'loading');\n    throw error;\n  }\n}\n", "import type * as C from '@apollo/client/core';\n\nimport type {\n  ComponentDocument,\n  Constructor,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  OptimisticResponseType,\n  RefetchQueriesType,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type { ApolloMutationElement } from '@apollo-elements/core/types';\n\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\n\nimport { ApolloElementMixin } from './apollo-element-mixin.js';\nimport { controlled } from '@apollo-elements/core/decorators';\n\nimport { ApolloMutationController } from '@apollo-elements/core/apollo-mutation-controller';\n\ntype MixinInstance<B extends Constructor> = B & {\n  new <D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>():\n    InstanceType<B> & ApolloMutationElement<D, V>;\n  documentType: 'mutation';\n  observedAttributes?: string[];\n}\n\nfunction ApolloMutationMixinImpl<B extends Constructor>(base: B): B & MixinInstance<B> {\n  class MixedApolloMutationElement<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n    extends ApolloElementMixin(base)<D, V> {\n    static override documentType = 'mutation' as const;\n\n    static get observedAttributes(): string[] {\n      return [\n        ...(super.observedAttributes ?? []), /* c8 ignore next */\n        'await-refetch-queries',\n        'refetch-queries',\n      ];\n    }\n\n    controller = new ApolloMutationController<D, V>(this, null, {\n      update: this.updater,\n      onCompleted: data => data && this.onCompleted?.(data),\n      onError: error => this.onError?.(error),\n    });\n\n    @controlled({ readonly: true }) readonly called = false;\n\n    @controlled() mutation: ComponentDocument<D> | null = null;\n\n    @controlled({ path: 'options' }) optimisticResponse?: OptimisticResponseType<D, V>;\n\n    @controlled({ path: 'options' }) refetchQueries: RefetchQueriesType<D> | null = null;\n\n    @controlled({ path: 'options' }) fetchPolicy?: Extract<C.FetchPolicy, 'no-cache'>;\n\n    @controlled({ path: 'options' }) awaitRefetchQueries?: boolean;\n\n    @controlled({ path: 'options' }) ignoreResults = false;\n\n    onCompleted?(_data: Data<D>): void;\n\n    onError?(_error: Error): void;\n\n    updater?(\n      ...params: Parameters<C.MutationUpdaterFn<Data<D>>>\n    ): ReturnType<C.MutationUpdaterFn<Data<D>>>;\n\n    override attributeChangedCallback(name: string, oldVal: string, newVal: string): void {\n      super.attributeChangedCallback?.(name, oldVal, newVal);\n      /* c8 ignore start */\n      // @ts-expect-error: ts is not tracking the static side\n      if ((super.constructor?.observedAttributes ?? []).includes(name))\n        return;\n      /* c8 ignore stop */\n\n      switch (name) { /* c8 ignore next */\n        case 'await-refetch-queries':\n          this.awaitRefetchQueries =\n            this.hasAttribute('await-refetch-queries');\n          break; /* c8 ignore next */\n\n        case 'refetch-queries':\n          this.refetchQueries =\n            !newVal ? null : newVal\n              .split(',')\n              .map(x => x.trim());\n          break; /* c8 ignore next */\n      }\n    }\n\n    /**\n     * This resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error.\n     */\n    public async mutate(\n      params?: Partial<C.MutationOptions<Data<D>, Variables<D, V>>>\n    ): Promise<C.FetchResult<Data<D>>> {\n      return this.controller.mutate(params);\n    }\n  }\n\n  return MixedApolloMutationElement as MixinInstance<B>;\n}\n\n/**\n * `ApolloMutationMixin`: class mixin for apollo-mutation elements.\n */\nexport const ApolloMutationMixin =\n  dedupeMixin(ApolloMutationMixinImpl);\n", "import type {\n  Constructor,\n  Data,\n  Variables,\n  RefetchQueriesType,\n  MaybeTDN,\n  MaybeVariables,\n} from '@apollo-elements/core/types';\n\nimport { attr } from '@microsoft/fast-element';\n\nimport { splitCommasAndTrim } from '@apollo-elements/core/lib/helpers';\nimport { ApolloElement } from './apollo-element.js';\nimport { ApolloMutationMixin } from '@apollo-elements/mixins/apollo-mutation-mixin';\n\nimport { hosted } from './decorators.js';\n\n/**\n * `ApolloMutation`\n *\n * \uD83D\uDC69\u200D\uD83D\uDE80 Custom element base class to issue mutations via your Apollo cache.\n *\n * See [`ApolloMutationInterface`](https://apolloelements.dev/api/core/interfaces/mutation) for more information on events\n *\n * @element\n */\nexport class ApolloMutation<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloMutationMixin(ApolloElement as Constructor<ApolloElement>)<D, V> {\n  /**\n   * @summary Latest mutation data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.\n   *\n   * @summary Mutation variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  @hosted()\n  @attr({ mode: 'boolean' })\n  called = false;\n\n  /**\n   * As an attribute, can be a string of comma-separated query names\n   * ```html\n   * <mutation-element refetch-queries=\"QueryA, QueryB,QueryC\"></mutation-element>\n   * ```\n   * As a property, you can pass any legal `refetchQueries` value.\n   */\n  @hosted({ path: 'options' })\n  @attr({\n    mode: 'fromView',\n    attribute: 'refetch-queries',\n    converter: {\n      toView() { /* c8 ignore next */ return null; },\n      fromView(value: string|string[]): string[] {\n        return typeof value !== 'string' ? value : splitCommasAndTrim(value);\n      },\n    },\n  })\n  refetchQueries: RefetchQueriesType<D> | null = null;\n\n  @hosted({ path: 'options' })\n  @attr({ mode: 'boolean', attribute: 'await-refetch-queries' })\n  awaitRefetchQueries?: boolean;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'fetch-policy' })\n  fetchPolicy?: 'no-cache'\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nimport type {\n  ComponentDocument,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  SubscriptionDataOptions,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type {\n  ApolloClient,\n  ApolloError,\n  DocumentNode,\n  FetchPolicy,\n  FetchResult,\n  NormalizedCacheObject,\n  Observable,\n  SubscriptionOptions,\n  WatchQueryOptions,\n} from '@apollo/client/core';\n\nimport { ApolloController, ApolloControllerOptions } from './apollo-controller.js';\n\nimport { bound } from './lib/bound.js';\n\nexport interface ApolloSubscriptionControllerOptions<D, V> extends ApolloControllerOptions<D, V>,\n          Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> {\n  variables?: Variables<D, V>,\n  fetchPolicy?: FetchPolicy;\n  noAutoSubscribe?: boolean;\n  shouldSubscribe?: (options?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>) => boolean;\n  shouldResubscribe?: boolean;\n  skip?: boolean;\n  onData?: (detail: {\n    client: ApolloClient<NormalizedCacheObject>;\n    subscriptionData: { data: Data<D> | null; loading: boolean; error: null; };\n  }) => void;\n  onComplete?: () => void;\n  onError?: (error: ApolloError) => void;\n}\n\nexport class ApolloSubscriptionController<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloController<D, V>\n  implements ReactiveController {\n  private observable?: Observable<FetchResult<Data<D>>>;\n\n  private observableSubscription?: ZenObservable.Subscription;\n\n  // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/40220\n  declare options: ApolloSubscriptionControllerOptions<D, V>;\n\n  #hasDisconnected = false;\n\n  #lastSubscriptionDocument?: DocumentNode;\n\n  get subscription(): ComponentDocument<D> | null { return this.document; }\n\n  set subscription(document: ComponentDocument<D> | null) { this.document = document; }\n\n  /** Flags an element that's ready and able to auto-subscribe */\n  public get canAutoSubscribe(): boolean {\n    return (\n      !!this.client &&\n      !this.options.noAutoSubscribe &&\n      this.shouldSubscribe()\n    );\n  }\n\n  constructor(\n    host: ReactiveControllerHost,\n    subscription?: ComponentDocument<D> | null,\n    options?: ApolloSubscriptionControllerOptions<D, V>\n  ) {\n    super(host, options);\n    this.init(subscription ?? null);/* c8 ignore next */\n  }\n\n  override hostConnected(): void {\n    super.hostConnected();\n    /* c8 ignore start */ // covered\n    if (this.#hasDisconnected && this.observableSubscription)\n      this.subscribe(); /* c8 ignore stop */\n    else\n      this.documentChanged(this.subscription);\n  }\n\n  override hostDisconnected(): void {\n    this.endSubscription();\n    this.#hasDisconnected = true;\n    super.hostDisconnected();\n  }\n\n  /**\n   * Determines whether the element is able to automatically subscribe\n   */\n  private canSubscribe(\n    options?: Partial<SubscriptionOptions<Variables<D, V> | null, Data<D>>>\n  ): boolean {\n    /* c8 ignore next 4 */\n    return (\n      !this.options.noAutoSubscribe &&\n      !!this.client &&\n      (!this.observable || !!this.options.shouldResubscribe) &&\n      !!(options?.query ?? this.subscription)\n    );\n  }\n\n  private initObservable(params?: Partial<SubscriptionDataOptions<D, V>>): void {\n    const {\n      shouldResubscribe = this.options.shouldResubscribe,\n      client = this.client,\n      skip = this.options.skip,\n      ...rest\n    } = params ?? {}; /* c8 ignore start */ // covered\n\n    if (!client) /* c8 ignore start */ // covered\n      throw new TypeError('No Apollo client. See https://apolloelements.dev/guides/getting-started/apollo-client/');\n\n\n    if ((this.observable && !shouldResubscribe) || skip)\n      return; /* c8 ignore stop */\n\n    const query = params?.subscription ?? this.subscription as DocumentNode; /* c8 ignore next */\n    this.#lastSubscriptionDocument = query;\n    this.observable = client.subscribe({\n      // It's better to let Apollo client throw this error\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      variables: this.variables,\n      context: this.options.context,\n      errorPolicy: this.options.errorPolicy,\n      fetchPolicy: this.options.fetchPolicy,\n      ...rest,\n      query,\n    });\n  }\n\n  /**\n   * Sets `data`, `loading`, and `error` on the instance when new subscription results arrive.\n   */\n  private nextData(result: FetchResult<Data<D>>) {\n    const { data = null, errors } = result;\n    // If we got to this line without a client, it's because of user error\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const client = this.client!;\n    const loading = false;\n    const subscriptionData = { data, loading, error: null };\n    const detail = { client, subscriptionData };\n    this.emitter.dispatchEvent(new CustomEvent('apollo-subscription-result', { detail }));\n    this.data = data;\n    this.error = null;\n    this.errors = errors ?? [];\n    this.loading = loading;\n    this.options.onData?.(detail); /* c8 ignore next */ // covered\n    this.notify('data', 'error', 'errors', 'loading');\n  }\n\n  /**\n   * Sets `error` and `loading` on the instance when the subscription errors.\n   */\n  private nextError(error: ApolloError) {\n    this.emitter.dispatchEvent(new CustomEvent('apollo-error', { detail: error }));\n    this.error = error;\n    this.loading = false;\n    this.options.onError?.(error); /* c8 ignore next */ // covered\n    this.notify('error', 'loading');\n  }\n\n  /**\n   * Shuts down the subscription\n   */\n  private onComplete(): void {\n    this.options.onComplete?.(); /* c8 ignore next */ // covered\n    this.endSubscription();\n    this.notify();\n  }\n\n  private endSubscription() {\n    if (this.observableSubscription)\n      this.observableSubscription.unsubscribe();\n  }\n\n  private shouldSubscribe(opts?: Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>): boolean {\n    return this.options.shouldSubscribe?.(opts) ?? true; /* c8 ignore next */\n  }\n\n  protected override clientChanged(): void {\n    if (this.canSubscribe() && this.shouldSubscribe())/* c8 ignore next */\n      this.subscribe();/* c8 ignore next */\n  }\n\n  protected override documentChanged(doc?: ComponentDocument<D> | null): void {\n    const query = doc ?? undefined;/* c8 ignore next */\n    if (doc === this.#lastSubscriptionDocument)\n      return;/* c8 ignore next */\n    this.cancel();\n    if (this.canSubscribe({ query }) && this.shouldSubscribe({ query })) /* c8 ignore next */\n      this.subscribe();/* c8 ignore next */\n  }\n\n  protected override variablesChanged(variables?: Variables<D, V>): void {\n    this.cancel();\n    if (this.canSubscribe({ variables }) && this.shouldSubscribe({ variables }))/* c8 ignore next */\n      this.subscribe();/* c8 ignore next */\n  }\n\n  /**\n   * @summary Starts the subscription\n   */\n  @bound public subscribe(params?: Partial<SubscriptionDataOptions<D, V>>): void {\n    this.initObservable(params);\n\n    /* c8 ignore start */ // covered\n    const shouldResubscribe = params?.shouldResubscribe ?? this.options.shouldResubscribe;\n    if (this.observableSubscription && !shouldResubscribe) return;\n    /* c8 ignore stop */\n\n    this.loading = true;\n    this.notify('loading');\n\n    this.observableSubscription =\n      this.observable?.subscribe({\n        next: this.nextData.bind(this),\n        error: this.nextError.bind(this),\n        complete: this.onComplete.bind(this),\n      });\n  }\n\n  /**\n   * @summary Ends the subscription\n   */\n  @bound public cancel(): void {\n    this.endSubscription();\n    this.observableSubscription = undefined;\n    this.observable = undefined;\n  }\n}\n", "import type * as C from '@apollo/client/core';\n\nimport type {\n  ComponentDocument,\n  Constructor,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  OnSubscriptionDataParams,\n  SubscriptionDataOptions,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type { ApolloSubscriptionElement } from '@apollo-elements/core/types';\n\nimport { ApolloSubscriptionController } from '@apollo-elements/core/apollo-subscription-controller';\nimport { ApolloElementMixin } from './apollo-element-mixin.js';\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { controlled } from '@apollo-elements/core/decorators';\n\ntype MixinInstance<B extends Constructor> = B & {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new <D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>(...a: any[]):\n    InstanceType<B> & ApolloSubscriptionElement<D, V>;\n  documentType: 'subscription';\n}\n\nfunction ApolloSubscriptionMixinImpl<B extends Constructor>(superclass: B): MixinInstance<B> {\n  class MixedApolloSubscriptionElement<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n    extends ApolloElementMixin(superclass)<D, V> {\n    static override documentType = 'subscription' as const;\n\n    static override get observedAttributes(): string[] {\n      return [\n        ...super.observedAttributes as string[],\n        'no-auto-subscribe',\n      ];\n    }\n\n    /**\n     * Latest subscription data.\n     */\n    declare data: Data<D> | null;\n\n    /**\n     * An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n     *\n     * Setting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.\n     *\n     * @summary Subscription variables.\n     */\n    declare variables: Variables<D, V> | null;\n\n    controller = new ApolloSubscriptionController<D, V>(this, null, {\n      shouldSubscribe: x => this.readyToReceiveDocument && this.shouldSubscribe(x),\n      onData: data => this.onSubscriptionData?.(data), /* c8 ignore next */ // covered\n      onComplete: () => this.onSubscriptionComplete?.(), /* c8 ignore next */ // covered\n      onError: error => this.onError?.(error),\n    });\n\n    @controlled() subscription: ComponentDocument<D> | null = null;\n\n    @controlled({ readonly: true }) declare readonly canAutoSubscribe: boolean;\n\n    @controlled({ path: 'options' }) context?: Record<string, unknown>;\n\n    @controlled({ path: 'options' }) fetchPolicy?: C.FetchPolicy;\n\n    @controlled({ path: 'options' }) pollInterval?: number;\n\n    @controlled({\n      path: 'options',\n      onSet(\n        this: ApolloSubscriptionElement,\n        value: ApolloSubscriptionElement['noAutoSubscribe']\n      ) {\n        this.toggleAttribute('no-auto-subscribe', !!value);\n      },\n    })\n    noAutoSubscribe = this.hasAttribute('no-auto-subscribe');\n\n    @controlled({ path: 'options' }) notifyOnNetworkStatusChange?: boolean;\n\n    @controlled({ path: 'options' })\n    shouldResubscribe: SubscriptionDataOptions['shouldResubscribe'] = false;\n\n    @controlled({ path: 'options' }) skip = false;\n\n    onSubscriptionData?(_result: OnSubscriptionDataParams<Data<D>>): void\n\n    onSubscriptionComplete?(): void\n\n    onError?(error: C.ApolloError): void\n\n    public subscribe(params?: Partial<SubscriptionDataOptions<D, V>>): void {\n      return this.controller.subscribe(params);\n    }\n\n    public cancel(): void {\n      return this.controller.cancel();\n    }\n\n    /**\n     * Determines whether the element should attempt to subscribe automatically\n     * Override to prevent subscribing unless your conditions are met\n     * @override\n     */\n    shouldSubscribe(\n      options?: Partial<C.SubscriptionOptions<Variables<D, V>, Data<D>>>\n    ): boolean {\n      return (void options, true);\n    }\n  }\n\n  return MixedApolloSubscriptionElement as unknown as MixinInstance<B>;\n}\n\n/**\n * `ApolloSubscriptionMixin`: class mixin for apollo-subscription elements.\n */\nexport const ApolloSubscriptionMixin =\n  dedupeMixin(ApolloSubscriptionMixinImpl);\n", "import type {\n  Constructor,\n  Data,\n  MaybeTDN,\n  MaybeVariables,\n  Variables,\n} from '@apollo-elements/core/types';\n\nimport type { FetchPolicy } from '@apollo/client/core';\n\nimport { ApolloElement } from './apollo-element.js';\nimport { ApolloSubscriptionMixin } from '@apollo-elements/mixins/apollo-subscription-mixin';\n\nimport { attr } from '@microsoft/fast-element';\n\nimport { hosted } from './decorators.js';\n\n/**\n * `ApolloSubscription`\n *\n * \uD83D\uDE80 Custom element base class that updates with an Apollo GraphQL subscription.\n *\n * @element\n *\n * See [`ApolloSubscriptionInterface`](https://apolloelements.dev/api/core/interfaces/subscription) for more information on events\n *\n */\nexport class ApolloSubscription<D extends MaybeTDN = MaybeTDN, V = MaybeVariables<D>>\n  extends ApolloSubscriptionMixin(ApolloElement as Constructor<ApolloElement>)<D, V> {\n  /**\n   * Latest subscription data.\n   */\n  declare data: Data<D> | null;\n\n  /**\n   * An object that maps from the name of a variable as used in the subscription GraphQL document to that variable's value.\n   *\n   * @summary Subscription variables.\n   */\n  declare variables: Variables<D, V> | null;\n\n  @hosted({ path: 'options' })\n  @attr({ attribute: 'fetch-policy' })\n  fetchPolicy?: FetchPolicy;\n}\n"],
  "mappings": "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",
  "names": []
}
