{
  "schemaVersion": "0.1.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "apollo-client-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin which applies a specific `ApolloClient` instance to the element.",
          "name": "ApolloClientMixin",
          "members": [
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject>"
              },
              "description": "The client specified with `ApolloClientMixin`."
            }
          ],
          "parameters": [
            {
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject>"
              },
              "description": "The specific `ApolloClient` instance."
            },
            {
              "name": "superclass",
              "type": {
                "text": "B"
              },
              "description": "An element that implements the `ApolloElementInterface`."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloClientMixin",
          "declaration": {
            "name": "ApolloClientMixin",
            "module": "apollo-client-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-element-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ApolloElementMixin",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'document'|'query'|'mutation'|'subscription'"
              },
              "static": true,
              "default": "document"
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The Apollo Client instance."
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController<D, V>"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              },
              "summary": "Operation document.\nA GraphQL document containing a single query, mutation, or subscription.\nYou can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM)."
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "I.Data<D> | null"
              },
              "summary": "Latest data"
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "I.Variables<D, V> | null"
              },
              "summary": "Operation variables.\nAn object that maps from the name of a variable as used in the operation's GraphQL document to that variable's value."
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "summary": "Latest error."
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly I.GraphQLError[]"
              },
              "summary": "Latest errors."
            },
            {
              "kind": "field",
              "name": "loading",
              "summary": "Whether a request is in-flight."
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "string"
              },
              "summary": "Fetch Policy for the operation."
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "summary": "Context passed to the link execution chain."
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation."
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document"
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "this['document']"
                  },
                  "description": "The GraphQL document."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document."
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "this['variables']"
                  },
                  "description": "The variables."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables."
            },
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updatePending",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updateComplete",
              "privacy": "private",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resolve",
              "privacy": "private",
              "type": {
                "text": "(v: boolean) => void"
              },
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "[init]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ControllerHostMixin",
                "module": "controller-host-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "apollo-element-connected",
              "type": {
                "text": "ApolloElementEvent"
              }
            },
            {
              "name": "apollo-element-disconnected",
              "type": {
                "text": "ApolloElementEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy"
            },
            {
              "name": "fetch-policy"
            }
          ],
          "mixins": [
            {
              "name": "ControllerHostMixin",
              "module": "/controller-host-mixin"
            },
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "B"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloElementMixin",
          "declaration": {
            "name": "ApolloElementMixin",
            "module": "apollo-element-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-mutation-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ApolloMutationMixin",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "static": true
            },
            {
              "kind": "field",
              "name": "controller"
            },
            {
              "kind": "field",
              "name": "called"
            },
            {
              "kind": "field",
              "name": "mutation",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              }
            },
            {
              "kind": "field",
              "name": "optimisticResponse",
              "type": {
                "text": "I.OptimisticResponseType<D, V>"
              }
            },
            {
              "kind": "field",
              "name": "refetchQueries",
              "type": {
                "text": "I.RefetchQueriesType<D> | null"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "Extract<C.FetchPolicy, 'no-cache'>"
              }
            },
            {
              "kind": "field",
              "name": "awaitRefetchQueries",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "ignoreResults"
            },
            {
              "kind": "method",
              "name": "onCompleted",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_data",
                  "type": {
                    "text": "I.Data<D>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onError",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_error",
                  "type": {
                    "text": "Error"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updater",
              "return": {
                "type": {
                  "text": "ReturnType<C.MutationUpdaterFn<I.Data<D>>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "Parameters<C.MutationUpdaterFn<I.Data<D>>>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mutate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<C.FetchResult<I.Data<D>>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<C.MutationOptions<I.Data<D>, I.Variables<D, V>>>"
                  }
                }
              ],
              "description": "This resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The Apollo Client instance.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              },
              "summary": "Operation document.\nA GraphQL document containing a single query, mutation, or subscription.\nYou can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "I.Data<D> | null"
              },
              "summary": "Latest data",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "I.Variables<D, V> | null"
              },
              "summary": "Operation variables.\nAn object that maps from the name of a variable as used in the operation's GraphQL document to that variable's value.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "summary": "Latest error.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly I.GraphQLError[]"
              },
              "summary": "Latest errors.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "summary": "Whether a request is in-flight.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "this['document']"
                  },
                  "description": "The GraphQL document."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "this['variables']"
                  },
                  "description": "The variables."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updatePending",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updateComplete",
              "privacy": "private",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resolve",
              "privacy": "private",
              "type": {
                "text": "(v: boolean) => void"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "[init]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "await-refetch-queries"
            },
            {
              "name": "refetch-queries"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "name": "fetch-policy",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ApolloElementMixin",
              "module": "/apollo-element-mixin"
            },
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "B"
              }
            }
          ],
          "events": [
            {
              "name": "apollo-element-connected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "name": "apollo-element-disconnected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloMutationMixin",
          "declaration": {
            "name": "ApolloMutationMixin",
            "module": "apollo-mutation-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-query-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "`ApolloQueryMixin`: class mixin for apollo-query elements.",
          "name": "ApolloQueryMixin",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'query'"
              },
              "static": true,
              "default": "query"
            },
            {
              "kind": "field",
              "name": "controller"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "I.Data<D> | null"
              },
              "summary": "The latest query data."
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "I.Variables<D, V> | null"
              },
              "description": "An object map from variable name to variable value, where the variables are used within the GraphQL query.\n\nSetting variables will initiate the query, unless [`noAutoSubscribe`](#noautosubscribe) is also set.",
              "summary": "Query variables."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloQueryControllerOptions<D, V>"
              }
            },
            {
              "kind": "field",
              "name": "partial",
              "description": "If data was read from the cache with missing fields,\npartial will be true. Otherwise, partial will be falsy.",
              "summary": "True when the query returned partial data."
            },
            {
              "kind": "field",
              "name": "networkStatus",
              "type": {
                "text": "NetworkStatus"
              },
              "description": "`networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\ndepending on your network status as it provides a more detailed view into the state of a network request\non your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\nThese number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query’s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\nreplace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\nIt is recommended that you use `loading`, however."
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              },
              "summary": "A GraphQL document containing a single query."
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "C.WatchQueryFetchPolicy"
              },
              "description": "Determines where the client may return a result from. The options are:\n\n- `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n- `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n- `cache-only`: return result from cache if available, fail otherwise.\n- `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n- `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n- `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.",
              "summary": "The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query."
            },
            {
              "kind": "field",
              "name": "partialRefetch",
              "type": {
                "text": "boolean"
              },
              "description": "If true, perform a query refetch if the query result is marked as being partial,\nand the returned data is reset to an empty Object by the Apollo Client QueryManager\n(due to a cache miss).\n\nThe default value is false for backwards-compatibility's sake,\nbut should be changed to true for most use-cases.",
              "summary": "Set to retry any partial query results."
            },
            {
              "kind": "field",
              "name": "returnPartialData",
              "type": {
                "text": "boolean"
              },
              "description": "Opt into receiving partial results from the cache for queries\nthat are not fully satisfied by the cache."
            },
            {
              "kind": "field",
              "name": "nextFetchPolicy",
              "type": {
                "text": "C.WatchQueryFetchPolicy | I.NextFetchPolicyFunction<D, V>"
              },
              "description": "When someone chooses cache-and-network or network-only as their\ninitial FetchPolicy, they often do not want future cache updates to\ntrigger unconditional network requests, which is what repeatedly\napplying the cache-and-network or network-only policies would seem\nto imply. Instead, when the cache reports an update after the\ninitial network request, it may be desirable for subsequent network\nrequests to be triggered only if the cache result is incomplete.\nThe nextFetchPolicy option provides a way to update\noptions.fetchPolicy after the intial network request, without\nhaving to set options.",
              "summary": "Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`."
            },
            {
              "kind": "field",
              "name": "noAutoSubscribe",
              "description": "When true, the component will not automatically subscribe to new data.\nCall the `subscribe()` method to do so."
            },
            {
              "kind": "field",
              "name": "notifyOnNetworkStatusChange",
              "type": {
                "text": "boolean"
              },
              "summary": "Whether or not updates to the network status should trigger next on the observer of this query."
            },
            {
              "kind": "field",
              "name": "pollInterval",
              "type": {
                "text": "number"
              },
              "summary": "The time interval (in milliseconds) on which this query should be refetched from the server."
            },
            {
              "kind": "method",
              "name": "onData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "I.Data<D>"
                  },
                  "description": "the query data."
                }
              ],
              "description": "Optional callback for when a query is completed."
            },
            {
              "kind": "method",
              "name": "onError",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "Error"
                  },
                  "description": "the error."
                }
              ],
              "description": "Optional callback for when an error occurs."
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "summary": "Flags an element that's ready and able to auto subscribe"
            },
            {
              "kind": "method",
              "name": "refetch",
              "return": {
                "type": {
                  "text": "Promise<C.ApolloQueryResult<I.Data<D>>>"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "I.Variables<D, V>"
                  },
                  "description": "The new set of variables. If there are missing variables, the previous values of those variables will be used.."
                }
              ],
              "description": "Exposes the [`ObservableQuery#refetch`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.refetch) method."
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<C.SubscriptionOptions<I.Variables<D, V>, I.Data<D>>>"
                  }
                }
              ],
              "description": "Determines whether the element should attempt to automatically subscribe i.e. begin querying\n\nOverride to prevent subscribing unless your conditions are met."
            },
            {
              "kind": "method",
              "name": "subscribe",
              "return": {
                "type": {
                  "text": "ZenObservable.Subscription"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<C.SubscriptionOptions<I.Variables<D, V>, I.Data<D>>>"
                  },
                  "description": "options for controlling how the subscription subscribes"
                }
              ],
              "description": "Resets the observableQuery and subscribes."
            },
            {
              "kind": "method",
              "name": "subscribeToMore",
              "return": {
                "type": {
                  "text": "void | (() => void)"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "C.SubscribeToMoreOptions<I.Data<D>, TSubscriptionVariables, TSubscriptionData>"
                  }
                }
              ],
              "description": "Lets you pass a GraphQL subscription and updateQuery function\nto subscribe to more updates for your query.\n\nThe `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results."
            },
            {
              "kind": "method",
              "name": "executeQuery",
              "return": {
                "type": {
                  "text": "Promise<C.ApolloQueryResult<I.Data<D>>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<C.QueryOptions<I.Variables<D, V>, I.Data<D>>> | undefined"
                  }
                }
              ],
              "description": "Executes a Query once and updates the component with the result"
            },
            {
              "kind": "method",
              "name": "fetchMore",
              "return": {
                "type": {
                  "text": "Promise<C.ApolloQueryResult<I.Data<D>>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<I.FetchMoreParams<D, V>> | undefined"
                  }
                }
              ],
              "description": "Exposes the `ObservableQuery#fetchMore` method.\nhttps://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n\nThe optional `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results.\n\nThe optional `variables` parameter is an optional new variables object."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The Apollo Client instance.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              },
              "summary": "Operation document.\nA GraphQL document containing a single query, mutation, or subscription.\nYou can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "summary": "Latest error.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly I.GraphQLError[]"
              },
              "summary": "Latest errors.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "summary": "Whether a request is in-flight.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "summary": "Context passed to the link execution chain.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "this['document']"
                  },
                  "description": "The GraphQL document."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "this['variables']"
                  },
                  "description": "The variables."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updatePending",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updateComplete",
              "privacy": "private",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resolve",
              "privacy": "private",
              "type": {
                "text": "(v: boolean) => void"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "[init]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "next-fetch-policy",
              "type": {
                "text": "C.WatchQueryFetchPolicy | I.NextFetchPolicyFunction<D, V>"
              },
              "description": "When someone chooses cache-and-network or network-only as their\ninitial FetchPolicy, they often do not want future cache updates to\ntrigger unconditional network requests, which is what repeatedly\napplying the cache-and-network or network-only policies would seem\nto imply. Instead, when the cache reports an update after the\ninitial network request, it may be desirable for subsequent network\nrequests to be triggered only if the cache result is incomplete.\nThe nextFetchPolicy option provides a way to update\noptions.fetchPolicy after the intial network request, without\nhaving to set options.",
              "summary": "Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`.",
              "fieldName": "nextFetchPolicy"
            },
            {
              "name": "no-auto-subscribe",
              "description": "When true, the component will not automatically subscribe to new data.\nCall the `subscribe()` method to do so.",
              "fieldName": "noAutoSubscribe"
            },
            {
              "name": "fetch-policy",
              "type": {
                "text": "C.WatchQueryFetchPolicy"
              },
              "description": "Determines where the client may return a result from. The options are:\n\n- `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n- `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n- `cache-only`: return result from cache if available, fail otherwise.\n- `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n- `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n- `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.",
              "summary": "The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.",
              "fieldName": "fetchPolicy"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ApolloElementMixin",
              "module": "/apollo-element-mixin"
            },
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "B"
              }
            }
          ],
          "events": [
            {
              "name": "apollo-element-connected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "name": "apollo-element-disconnected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloQueryMixin",
          "declaration": {
            "name": "ApolloQueryMixin",
            "module": "apollo-query-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-subscription-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ApolloSubscriptionMixin",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "static": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "I.Data<D> | null"
              },
              "description": "Latest subscription data."
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "I.Variables<D, V> | null"
              },
              "description": "An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n\nSetting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.",
              "summary": "Subscription variables."
            },
            {
              "kind": "field",
              "name": "controller"
            },
            {
              "kind": "field",
              "name": "subscription",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              }
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "C.FetchPolicy"
              }
            },
            {
              "kind": "field",
              "name": "pollInterval",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "noAutoSubscribe"
            },
            {
              "kind": "field",
              "name": "notifyOnNetworkStatusChange",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "shouldResubscribe",
              "type": {
                "text": "I.SubscriptionDataOptions['shouldResubscribe']"
              }
            },
            {
              "kind": "field",
              "name": "skip"
            },
            {
              "kind": "method",
              "name": "onSubscriptionData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_result",
                  "type": {
                    "text": "I.OnSubscriptionDataParams<I.Data<D>>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSubscriptionComplete",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onError",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "C.ApolloError"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "p",
                  "type": {
                    "text": "P<this['controller'], 'subscribe'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cancel",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<C.SubscriptionOptions<I.Variables<D, V>, I.Data<D>>>"
                  }
                }
              ],
              "description": "Determines whether the element should attempt to subscribe automatically\nOverride to prevent subscribing unless your conditions are met"
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The Apollo Client instance.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "I.ComponentDocument<D> | null"
              },
              "summary": "Operation document.\nA GraphQL document containing a single query, mutation, or subscription.\nYou can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "summary": "Latest error.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly I.GraphQLError[]"
              },
              "summary": "Latest errors.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "summary": "Whether a request is in-flight.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "this['document']"
                  },
                  "description": "The GraphQL document."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "this['variables']"
                  },
                  "description": "The variables."
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables.",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updatePending",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#updateComplete",
              "privacy": "private",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resolve",
              "privacy": "private",
              "type": {
                "text": "(v: boolean) => void"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "[init]",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-auto-subscribe"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "errorPolicy determines the level of events for errors in the execution result. The options are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "name": "fetch-policy",
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ApolloElementMixin",
              "module": "/apollo-element-mixin"
            },
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "B"
              }
            }
          ],
          "events": [
            {
              "name": "apollo-element-connected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            },
            {
              "name": "apollo-element-disconnected",
              "type": {
                "text": "ApolloElementEvent"
              },
              "inheritedFrom": {
                "name": "ApolloElementMixin",
                "module": "apollo-element-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloSubscriptionMixin",
          "declaration": {
            "name": "ApolloSubscriptionMixin",
            "module": "apollo-subscription-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controller-host-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ControllerHostMixin",
          "members": [
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#updatePending",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#updateComplete",
              "privacy": "private",
              "type": {
                "text": "Promise<boolean>"
              }
            },
            {
              "kind": "field",
              "name": "#resolve",
              "privacy": "private",
              "type": {
                "text": "(v: boolean) => void"
              }
            },
            {
              "kind": "field",
              "name": "[init]",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              }
            },
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ],
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ControllerHostMixin",
          "declaration": {
            "name": "ControllerHostMixin",
            "module": "controller-host-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "graphql-script-child-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "GraphQLScriptChildMixin",
          "members": [
            {
              "kind": "field",
              "name": "mo",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private",
              "description": "Updates the element state in reaction to GraphQL or JSON script child changes."
            },
            {
              "kind": "method",
              "name": "matchNode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "When encountering a DOM Mutation, update the element's state if relevant."
            },
            {
              "kind": "method",
              "name": "onDOMMutation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "records",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ],
              "description": "Update the element state in reaction to DOM updates that change the\ndeclarative GraphQL document or JSON-variable scripts"
            },
            {
              "kind": "method",
              "name": "parseGQL",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "this['document']"
                }
              },
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseVariables",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "this['variables']"
                }
              },
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fetchDocument",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<this['document']>"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDOMGraphQLDocument",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<this['document']>"
                }
              },
              "summary": "Get a GraphQL DocumentNode from the element's GraphQL script child"
            },
            {
              "kind": "method",
              "name": "getDOMVariables",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "this['variables']"
                }
              },
              "summary": "Gets operation variables from the element's JSON script child"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "B"
              }
            }
          ],
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GraphQLScriptChildMixin",
          "declaration": {
            "name": "GraphQLScriptChildMixin",
            "module": "graphql-script-child-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloElementMixin",
          "declaration": {
            "name": "ApolloElementMixin",
            "module": "./apollo-element-mixin"
          }
        },
        {
          "kind": "js",
          "name": "ApolloQueryMixin",
          "declaration": {
            "name": "ApolloQueryMixin",
            "module": "./apollo-query-mixin"
          }
        },
        {
          "kind": "js",
          "name": "ApolloMutationMixin",
          "declaration": {
            "name": "ApolloMutationMixin",
            "module": "./apollo-mutation-mixin"
          }
        },
        {
          "kind": "js",
          "name": "ApolloSubscriptionMixin",
          "declaration": {
            "name": "ApolloSubscriptionMixin",
            "module": "./apollo-subscription-mixin"
          }
        },
        {
          "kind": "js",
          "name": "ApolloClientMixin",
          "declaration": {
            "name": "ApolloClientMixin",
            "module": "./apollo-client-mixin"
          }
        },
        {
          "kind": "js",
          "name": "GraphQLScriptChildMixin",
          "declaration": {
            "name": "GraphQLScriptChildMixin",
            "module": "./graphql-script-child-mixin"
          }
        },
        {
          "kind": "js",
          "name": "TypePoliciesMixin",
          "declaration": {
            "name": "TypePoliciesMixin",
            "module": "./type-policies-mixin"
          }
        },
        {
          "kind": "js",
          "name": "ValidateVariablesMixin",
          "declaration": {
            "name": "ValidateVariablesMixin",
            "module": "./validate-variables-mixin"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "type-policies-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Lazily adds [`TypePolicies`](https://www.apollographql.com/docs/react/caching/cache-configuration/#typepolicy-fields)\nto the Apollo client when the element connects to the DOM,\nfrom the element's `typePolicies` instance property.",
          "name": "TypePoliciesMixin",
          "members": [
            {
              "kind": "field",
              "name": "typePolicies",
              "type": {
                "text": "TypePolicies"
              },
              "description": "`TypePolicies` to lazy-load."
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "B"
              }
            }
          ],
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TypePoliciesMixin",
          "declaration": {
            "name": "TypePoliciesMixin",
            "module": "type-policies-mixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "validate-variables-mixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin which prevents query or subscription operations from fetching until their required variables are set.",
          "name": "ValidateVariablesMixin",
          "members": [
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions>"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "B"
              },
              "description": "An element which implements either `ApolloQueryInterface` or `ApolloSubscriptionInterface`."
            }
          ],
          "mixins": [
            {
              "name": "dedupeMixin",
              "package": "@open-wc/dedupe-mixin"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateVariablesMixin",
          "declaration": {
            "name": "ValidateVariablesMixin",
            "module": "validate-variables-mixin.js"
          }
        }
      ]
    }
  ]
}
